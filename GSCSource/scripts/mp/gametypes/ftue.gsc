// S4 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_0271()
{
    if ( getdvar( "#x32ea5e908954bfea7" ) == "mp_background" )
        return;

    _id_07B3::_id_021D();
    _id_07B3::_id_D849();
    _func_01D2( "scr_supers_killswitch", 1 );
    _func_01D2( "scr_loadoutPerksOff", 1 );
    var_0[0] = _id_0A69::_id_6A43();
    _id_07AD::_id_0271( var_0 );
    _id_0A69::_id_C29C( _id_0A69::_id_6A43(), 0, 0, 9 );
    _id_0A69::registersharedfunc( _id_0A69::_id_6A43(), 600 );
    _id_0A69::_id_C29F( _id_0A69::_id_6A43(), 75 );
    _id_0A69::_id_C29B( _id_0A69::_id_6A43(), 1 );
    _id_0A69::_id_C2C2( _id_0A69::_id_6A43(), 1 );
    _id_0A69::_id_C270( _id_0A69::_id_6A43(), 0 );
    _id_0A69::_id_C24F( _id_0A69::_id_6A43(), 0 );
    _id_FC7A();
    level._id_EF62 = 1;
    level._id_AB9A = ::_id_AB9A;
    level._id_6D2C = ::_id_6D2C;
    level._id_AB2C = ::_id_AB2C;
    level._id_9FD5 = ::_id_AB91;
    game["dialog"]["gametype"] = "gametype_ftue";

    if ( getdvarint( "#x33b8132c2bbd3f240" ) )
        game["dialog"]["gametype"] = "hc_" + game["dialog"]["gametype"];
    else if ( getdvarint( "#x3863d66ab814c070" ) )
        game["dialog"]["gametype"] = "thirdp_" + game["dialog"]["gametype"];
}

_id_81CB()
{
    _id_0A69::_id_D4D3();
    _func_01D2( "scr_ftue_roundswitch", 0 );
    _id_0A69::_id_C29C( "ftue", 0, 0, 9 );
    _func_01D2( "scr_ftue_roundlimit", 1 );
    _id_0A69::_id_C29B( "ftue", 1 );
    _func_01D2( "scr_ftue_winlimit", 1 );
    _id_0A69::_id_C2C2( "ftue", 1 );
    _func_01D2( "scr_ftue_halftime", 0 );
    _id_0A69::_id_C24F( "ftue", 0 );
    _func_01D2( "scr_ftue_promode", 0 );
}

_id_AB9A()
{
    _func_01CE( "auto_change" );

    if ( !isdefined( game["switchedsides"] ) )
        game["switchedsides"] = 0;

    if ( game["switchedsides"] )
    {
        var_0 = game["attackers"];
        var_1 = game["defenders"];
        game["attackers"] = var_1;
        game["defenders"] = var_0;
    }

    foreach ( var_3 in level._id_EF86 )
    {
        _id_0A69::_id_D610( var_3, &"OBJECTIVES/FTUE" );

        if ( level._id_E427 )
            _id_0A69::_id_D60E( var_3, &"OBJECTIVES/FTUE" );
        else
            _id_0A69::_id_D60E( var_3, &"OBJECTIVES/FTUE" );

        _id_0A69::_id_D609( var_3, &"OBJECTIVES/FTUE_HINT" );
    }

    if ( isdefined( level._id_827B ) )
        [[ level._id_827B ]]();
    else
        _id_827A();
}

_id_FC7A()
{
    scripts\mp\gametypes\common::_id_FC36();
}

_id_827A()
{
    level._id_E324 = ( 0, 0, 0 );
    level._id_E321 = ( 0, 0, 0 );

    if ( isdefined( _id_0999::_id_6AF9() ) )
        _id_07EE::_id_D454( "BigTDM", "Crit_Frontline" );
    else
        _id_07EE::_id_D454( "Default", "Crit_Frontline" );

    _id_07EE::_id_1111( "mp_tdm_spawn_allies_start" );
    _id_07EE::_id_1111( "mp_tdm_spawn_axis_start" );
    _id_07EE::_id_110D( game["attackers"], "mp_tdm_spawn_allies_start" );
    _id_07EE::_id_110D( game["defenders"], "mp_tdm_spawn_axis_start" );
    var_0 = _id_07EE::_id_6D30( "mp_tdm_spawn_allies_start" );
    var_1 = _id_07EE::_id_6D30( "mp_tdm_spawn_axis_start" );
    _id_07EE::_id_C2AB( "start_attackers", var_0 );
    _id_07EE::_id_C2AB( "start_defenders", var_1 );
    _id_07EE::_id_110D( "allies", "mp_tdm_spawn" );
    _id_07EE::_id_110D( "axis", "mp_tdm_spawn" );
    _id_07EE::_id_110D( "allies", "mp_tdm_spawn_secondary", 1, 1 );
    _id_07EE::_id_110D( "axis", "mp_tdm_spawn_secondary", 1, 1 );
    var_2 = _id_07EE::_id_6D30( "mp_tdm_spawn" );
    var_3 = _id_07EE::_id_6D30( "mp_tdm_spawn_secondary" );
    _id_07EE::_id_C2AB( "normal", var_2 );
    _id_07EE::_id_C2AB( "fallback", var_3 );

    if ( istrue( level._id_F0E1 ) )
    {
        var_4 = getdvarfloat( "scr_tdmAnywhere_centerX", _func_01B7( -4096, 4096 ) );
        var_5 = getdvarfloat( "scr_tdmAnywhere_centerY", _func_01B7( -4096, 4096 ) );
        var_6 = getdvarfloat( "scr_tdmAnywhere_centerZ", _func_01B7( 0, 512 ) );
        level._id_9A95 = ( var_4, var_5, var_6 );
    }
    else
    {
        level._id_9A95 = _id_07EE::_id_5AC1( level._id_E324, level._id_E321 );
        setgameendtime( level._id_9A95 );
    }

    _id_07EE::_id_0EBC();
}

_id_6D2C()
{
    var_0 = self._id_0309["team"];
    var_1 = undefined;

    if ( istrue( level._id_F0E1 ) )
    {
        var_2 = level._id_EF36._id_175B * _func_01B7( level._id_EF35 * -1.0, level._id_EF35 );
        var_3 = undefined;

        if ( var_0 == "axis" )
            var_3 = level._id_EF36._id_174B * level._id_EF33 * -1.0;
        else
            var_3 = level._id_EF36._id_174B * level._id_EF33;

        var_1 = _func_020F();
        var_1._id_02EA = level._id_9A95 + var_2 + var_3 + ( 0, 0, level._id_EF34 );
        var_1._id_0054 = ( 0, 0, 0 );
        var_1.health = 1;
    }
    else if ( _id_07EE::_id_DC03() )
    {
        if ( var_0 == game["attackers"] )
            var_1 = _id_07EE::_id_6D2C( self, var_0, "start_attackers", undefined );
        else
            var_1 = _id_07EE::_id_6D2C( self, var_0, "start_defenders", undefined );
    }
    else
        var_1 = _id_07EE::_id_6D2C( self, var_0, "normal", "fallback" );

    return var_1;
}

_id_AB91()
{
    self _meth_82F6( "ui_match_status_hint_text", 0 );
    self _meth_82F6( "ui_hide_minimap", 1 );

    if ( getdvarint( "scr_apply_friendly_outline" ) != 0 )
        thread _id_07F7::_id_ACC7();

    if ( !istrue( level._id_F0E1 ) )
        return;

    self _meth_8362( _func_025B( level._id_9A95 - self._id_02EA ) );
}

_id_AB2C( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    scripts\mp\gametypes\common::_id_AA76( var_0, var_1, var_2, var_3, var_4, var_5 );
}

_id_ABAD()
{
    var_0 = _id_07AE::_id_6A81();

    if ( game["status"] == "overtime" )
        var_0 = "forfeit";
    else if ( "tie" )
        var_0 = "overtime";

    thread _id_07AC::_id_52D7( var_0, game["end_reason"]["time_limit_reached"] );
}
