// S4 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "#x32ea5e908954bfea7" ) == "mp_background" )
        return;

    _id_07B3::init();
    _id_07B3::_id_D849();
    var_0[0] = scripts\mp\utility\game::getgametype();
    _id_07AD::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level._id_81CB = ::_id_81CB;
        [[ level._id_81CB ]]();
        level thread scripts\mp\utility\game::_id_C2DD();
    }
    else
    {
        scripts\mp\utility\game::_id_C29C( scripts\mp\utility\game::getgametype(), 0, 0, 9 );
        scripts\mp\utility\game::_id_C2B3( scripts\mp\utility\game::getgametype(), 10 );
        scripts\mp\utility\game::_id_C29F( scripts\mp\utility\game::getgametype(), 100 );
        scripts\mp\utility\game::_id_C29B( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::_id_C2C2( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::_id_C270( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::_id_C24F( scripts\mp\utility\game::getgametype(), 0 );
    }

    level.teambased = getdvarint( "scr_cranked_teambased", 1 ) == 1;
    level._id_AB9A = ::_id_AB9A;
    level._id_AB46 = ::_id_AB46;
    level._id_6D2C = ::_id_6D2C;
    level._id_AB2C = ::_id_AB2C;

    if ( !level.teambased )
    {
        level._id_AB62 = ::_id_AB62;
        setdvar( "scr_cranked_scorelimit", getdvarint( "scr_cranked_scorelimit_ffa", 60 ) );
        _func_01F0( "ffa" );
    }

    game["dialog"]["gametype"] = "cranked";

    if ( getdvarint( "#x33b8132c2bbd3f240" ) )
        game["dialog"]["gametype"] = "hc_" + game["dialog"]["gametype"];
    else if ( getdvarint( "#x3863d66ab814c070" ) )
        game["dialog"]["gametype"] = "thirdp_" + game["dialog"]["gametype"];
    else if ( getdvarint( "scr_diehard" ) )
        game["dialog"]["gametype"] = "dh_" + game["dialog"]["gametype"];
    else if ( getdvarint( "scr_" + scripts\mp\utility\game::getgametype() + "_promode" ) )
        game["dialog"]["gametype"] = game["dialog"]["gametype"] + "_pro";

    game["dialog"]["offense_obj"] = "crnk_hint";
    game["dialog"]["begin_cranked"] = "crnk_cranked";
    game["dialog"]["five_seconds_left"] = "crnk_det";
    game["strings"]["overtime_hint"] = &"MP/FIRST_BLOOD";
}

_id_AB46( var_0 )
{
    var_0 thread _id_AB65();
}

_id_AB65()
{
    self endon( "disconnect" );

    for (;;)
        self waittill( "spawned_player" );
}

_id_81CB()
{
    scripts\mp\utility\game::_id_D4D3();
    _func_01D2( "scr_cranked_roundswitch", 0 );
    scripts\mp\utility\game::_id_C29C( "cranked", 0, 0, 9 );
    _func_01D2( "scr_cranked_roundlimit", 1 );
    scripts\mp\utility\game::_id_C29B( "cranked", 1 );
    _func_01D2( "scr_cranked_winlimit", 1 );
    scripts\mp\utility\game::_id_C2C2( "cranked", 1 );
    _func_01D2( "scr_cranked_halftime", 0 );
    scripts\mp\utility\game::_id_C24F( "cranked", 0 );
    _func_01D2( "scr_cranked_promode", 0 );
}

_id_AB9A()
{
    _func_01CE( "auto_change" );

    if ( !isdefined( game["switchedsides"] ) )
        game["switchedsides"] = 0;

    if ( game["switchedsides"] )
    {
        var_0 = game["attackers"];
        var_1 = game["defenders"];
        game["attackers"] = var_1;
        game["defenders"] = var_0;
    }

    var_2 = &"OBJECTIVES/WAR";
    var_3 = &"OBJECTIVES/WAR_SCORE";
    var_4 = &"OBJECTIVES/WAR_HINT";

    if ( !level.teambased )
    {
        var_2 = &"OBJECTIVES/DM";
        var_3 = &"OBJECTIVES/DM_SCORE";
        var_4 = &"OBJECTIVES/DM_HINT";
    }

    foreach ( var_6 in level._id_EF86 )
    {
        scripts\mp\utility\game::_id_D610( var_6, var_2 );

        if ( level._id_E427 )
            scripts\mp\utility\game::_id_D60E( var_6, var_2 );
        else
            scripts\mp\utility\game::_id_D60E( var_6, var_3 );

        scripts\mp\utility\game::_id_D609( var_6, var_4 );
    }

    _id_827A();
    _id_3E37();
}

_id_827A()
{
    level._id_E324 = ( 0, 0, 0 );
    level._id_E321 = ( 0, 0, 0 );

    if ( level.teambased )
    {
        _id_07EE::_id_D454( "Default", "Crit_Frontline" );
        _id_07EE::_id_1111( "mp_tdm_spawn_allies_start" );
        _id_07EE::_id_1111( "mp_tdm_spawn_axis_start" );
        _id_07EE::_id_110D( "allies", "mp_tdm_spawn" );
        _id_07EE::_id_110D( "axis", "mp_tdm_spawn" );
        _id_07EE::_id_C2AB( "normal", "mp_tdm_spawn" );
        _id_07EE::_id_C2AB( "fallback", "mp_tdm_spawn_secondary" );
    }
    else
    {
        _id_07EE::_id_D454( "FreeForAll", "Crit_Default" );
        _id_07EE::_id_110D( "allies", "mp_dm_spawn" );
        _id_07EE::_id_110D( "axis", "mp_dm_spawn" );
        _id_07EE::_id_C2AB( "normal", "mp_dm_spawn" );
        _id_07EE::_id_C2AB( "fallback", "mp_dm_spawn_secondary" );
    }

    level._id_9A95 = _id_07EE::_id_5AC1( level._id_E324, level._id_E321 );
    setgameendtime( level._id_9A95 );
    _id_07EE::_id_0EBC();
}

_id_6D2C()
{
    if ( level.teambased )
    {
        var_0 = self.pers["team"];

        if ( game["switchedsides"] )
            var_0 = scripts\mp\utility\game::_id_6BC3( var_0 )[0];

        if ( _id_07EE::_id_DC03() )
        {
            var_1 = _id_07EE::_id_6D30( "mp_tdm_spawn_" + var_0 + "_start" );
            var_2 = _id_07EE::_id_6D2F( var_1 );
        }
        else
            var_2 = _id_07EE::_id_6D2C( self, var_0, "normal", "fallback" );
    }
    else if ( level._id_7E95 )
    {
        var_1 = _id_07EE::_id_6DBF( self.team );
        var_2 = _id_07EE::_id_6D2E( var_1 );
    }
    else
        var_2 = _id_07EE::_id_6D2C( self, "none", "normal", "fallback" );

    return var_2;
}

_id_AB2C( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_0 _id_3857();
    var_6 = scripts\mp\rank::_id_6CEE( "score_increment" );

    if ( isdefined( var_1._id_3E37 ) )
    {
        var_6 = var_6 * 2;
        var_7 = "kill_cranked";
        var_1 thread _id_AAFB( var_7 );
        var_1.pers["killChains"]++;
        var_1 _id_07D5::_id_E76D( "round", "killChains", var_1.pers["killChains"] );
    }
    else if ( scripts\mp\utility\player::isreallyalive( var_1 ) )
        var_1 _id_99CB( "begin_cranked" );

    if ( isdefined( var_0._id_1DB6 ) && !isdefined( level._id_1D04 ) )
    {
        foreach ( var_9 in var_0._id_1DB6 )
        {
            if ( !isdefined( _id_0A62::_id_0D8D( var_9 ) ) )
                continue;

            if ( var_9 == var_1 )
                continue;

            if ( var_0 == var_9 )
                continue;

            if ( !isdefined( var_9._id_3E37 ) )
                continue;

            var_9 thread _id_AA5F( "assist_cranked" );
        }
    }

    if ( level.teambased )
        level scripts\mp\gamescore::_id_6FE4( var_1.pers["team"], var_6, 0 );
    else
    {
        var_11 = 0;

        foreach ( var_9 in level.players )
        {
            if ( isdefined( var_9._id_0369 ) && var_9._id_0369 > var_11 )
                var_11 = var_9._id_0369;
        }
    }
}

_id_3857()
{
    self setclientomnvar( "ui_cranked_bomb_timer_end_milliseconds", 0 );
    self._id_3E37 = undefined;
    self._id_3E38 = undefined;
}

_id_ABAD()
{
    var_0 = scripts\mp\gamescore::_id_6A81();

    if ( game["status"] == "overtime" )
        var_0 = "forfeit";
    else if ( var_0 == "tie" )
        var_0 = "overtime";

    thread scripts\mp\gamelogic::_id_52D7( var_0, game["end_reason"]["time_limit_reached"] );
}

_id_AB62( var_0, var_1 )
{
    if ( var_0 != "super_kill" && issubstr( var_0, "kill" ) )
    {
        var_2 = scripts\mp\rank::_id_6CEE( "score_increment" );

        if ( isdefined( var_1._id_3E37 ) )
            var_2 = var_2 * 2;

        return var_2;
    }

    return 0;
}

_id_3E37()
{
    level._id_3E39 = 30;
}

_id_99CB( var_0 )
{
    _id_0A64::_id_9120( var_0 );
    thread scripts\mp\rank::_id_CBF3( var_0 );
    _id_D4DF( "kill" );
    self._id_3E37 = 1;
    scripts\mp\utility\perk::_id_6FA5( "specialty_fastreload" );
    scripts\mp\utility\perk::_id_6FA5( "specialty_quickdraw" );
    scripts\mp\utility\perk::_id_6FA5( "specialty_fastoffhand" );
    scripts\mp\utility\perk::_id_6FA5( "specialty_fastsprintrecovery" );
    scripts\mp\utility\perk::_id_6FA5( "specialty_marathon" );
    scripts\mp\utility\perk::_id_6FA5( "specialty_quickswap" );
    scripts\mp\utility\perk::_id_6FA5( "specialty_stalker" );
    self._id_A24C = 1.2;
    scripts\mp\weapons::_id_FCCA();
}

_id_AAFB( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    while ( !isdefined( self.pers ) )
        waitframe();

    thread _id_0A76::_id_6FE6( var_0 );
    _id_D4DF( "kill" );
}

_id_AA5F( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    thread scripts\mp\rank::_id_CBF3( var_0 );
    _id_D4DF( "assist" );
}

_id_10A99( var_0 )
{
    self notify( "watchBombTimer" );
    self endon( "watchBombTimer" );
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    var_1 = 5;
    scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( var_0 - var_1 - 1 );
    _id_0A64::_id_9120( "five_seconds_left" );
    scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( 1.0 );
    self setclientomnvar( "ui_cranked_bomb_timer_final_seconds", 1 );

    while ( var_1 > 0 )
    {
        scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( 1.0 );
        var_1--;
    }

    if ( isdefined( self ) && scripts\mp\utility\player::isreallyalive( self ) )
    {
        self playsound( "frag_grenade_expl_trans" );
        _id_0A62::_id_0D61();
        self setclientomnvar( "ui_cranked_bomb_timer_end_milliseconds", 0 );
    }
}

_id_D4DF( var_0 )
{
    var_1 = level._id_3E39;

    if ( var_0 == "assist" )
        var_1 = int( min( ( self._id_3E38 - gettime() ) / 1000 + level._id_3E39 * 0.5, level._id_3E39 ) );

    var_2 = var_1 * 1000 + gettime();
    self setclientomnvar( "ui_cranked_bomb_timer_end_milliseconds", var_2 );
    self._id_3E38 = var_2;
    thread _id_10AB4();
    thread _id_10A99( var_1 );
    thread _id_10AD6();
}

_id_10AB4()
{
    self notify( "watchCrankedHostMigration" );
    self endon( "watchCrankedHostMigration" );
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    level waittill( "host_migration_begin" );
    self setclientomnvar( "ui_cranked_timer_stopped", 1 );
    var_0 = scripts\mp\hostmigration::_id_10956();
    self setclientomnvar( "ui_cranked_timer_stopped", 0 );

    if ( self._id_3E38 + var_0 < 5 )
        self setclientomnvar( "ui_cranked_bomb_timer_final_seconds", 1 );

    if ( var_0 > 0 )
        self setclientomnvar( "ui_cranked_bomb_timer_end_milliseconds", self._id_3E38 + var_0 );
    else
        self setclientomnvar( "ui_cranked_bomb_timer_end_milliseconds", self._id_3E38 );
}

_id_10AD6()
{
    self notify( "watchEndGame" );
    self endon( "watchEndGame" );
    self endon( "death_or_disconnect" );

    for (;;)
    {
        if ( game["state"] == "postgame" || level._id_609B )
        {
            self setclientomnvar( "ui_cranked_bomb_timer_end_milliseconds", 0 );
            break;
        }

        wait 0.1;
    }
}
