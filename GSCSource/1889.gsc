// S4 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_2F72()
{
    level thread _id_2F94();
}

_id_2F5D( var_0, var_1 )
{
    var_2 = self;
    var_2 _id_2F81( var_0 );
    var_3 = getdvarint( "scr_calloutmarkerping_zoffset_entity_enemy", 82 );
    var_4 = var_1.origin + ( 0, 0, var_3 );
    var_5 = 1;
    var_6 = var_2 _meth_87A2( 1 );
    var_7 = var_2 _meth_87A2( 2 );

    if ( var_7 < var_6 )
    {
        var_6 = var_7;
        var_5 = 2;
    }

    var_2 _meth_8713( var_5, var_4, 0 );
    var_2 thread _id_0B65( var_5 );
    _id_0B64( "Enemy switched to danger" );
}

_id_0B64( var_0 )
{

}

_id_0B68()
{
    return 1;
}

_id_0B61( var_0 )
{
    return var_0 == 7 || var_0 == 8;
}

_id_0B60( var_0 )
{
    return var_0 == 3 || var_0 == 4;
}

_id_0B5F( var_0 )
{
    return var_0 == 1 || var_0 == 2;
}

_id_0B65( var_0, var_1 )
{
    var_2 = self;
    level endon( "game_ended" );
    var_2 endon( "disconnect" );
    var_2 notify( "predictiveCalloutClear_" + var_0 );
    var_2 endon( "predictiveCalloutClear_" + var_0 );
    var_3 = 2;
    var_4 = undefined;

    if ( _id_0B60( var_0 ) )
    {
        var_5 = var_2 _meth_878E( var_0 );

        if ( isdefined( var_5 ) )
        {
            var_6 = getdvarint( "scr_calloutmarkerping_track_player_switch_to_danger", 1 );

            if ( var_6 && _id_0B5A( var_5, var_2 ) )
            {
                var_3 = getdvarfloat( "scr_calloutmarkerping_track_player_time", 3.0 );
                var_4 = var_5;
                _id_0B64( "Enemy tracked!" );
            }

            var_2 thread _id_2F8C( var_0, var_5 );
        }
    }
    else if ( var_0 == 0 )
    {
        if ( getdvarint( "scr_calloutmarkerping_navigation_proximity_cancel", 0 ) )
            var_2 thread _id_2F79();
    }
    else if ( var_0 == 5 )
        var_2 thread _id_2F8F( var_0 );
    else if ( _id_0B61( var_0 ) )
    {
        var_7 = var_2 _meth_878E( var_0 );
        var_2 thread _id_2F8E( var_0, var_7 );
    }
    else if ( var_0 == 6 )
    {
        var_7 = var_2 _meth_878E( var_0 );
        var_2 thread _id_2F8C( var_0, var_7 );
        var_2 thread _id_2F83( var_0, var_7 );
    }
    else if ( !_id_0B68() )
    {
        if ( var_0 == -1 )
            var_2 thread _id_2F8D( -1, var_1 );
    }

    if ( !isdefined( var_4 ) )
        var_3 = var_2 _id_2F6C( var_0 );

    _id_0B64( "Timeout value before wait: " + var_3 + " | poolID: " + var_0 );
    wait( var_3 );

    if ( isdefined( var_4 ) && isdefined( var_2 ) )
        var_2 thread _id_2F5D( var_0, var_4 );
    else
    {
        _id_0B64( "Pool timed out: " + var_0 );
        var_2 _id_2F81( var_0 );
    }
}

_id_0B62()
{
    var_0 = self;

    for ( var_1 = 0; var_1 < 9; var_1++ )
    {
        if ( var_0 _meth_878D( var_1 ) )
            return var_1;
    }

    return -1;
}

_id_0B63()
{
    var_0 = self;
    level endon( "game_ended" );
    var_0 endon( "disconnect" );

    for (;;)
    {
        var_0 waittill( "luinotifyserver", var_1, var_2, var_3 );

        if ( !isdefined( var_1 ) || !isdefined( var_2 ) )
            continue;

        _id_0B64( "Notification " + var_1 + " on pool " + var_2 );

        switch ( var_1 )
        {
            case "calloutmarkerping_added":
                var_0 _id_0B54( var_2 );
                break;
            case "calloutmarkerping_cleared":
                var_0 _id_0B56( var_2 );
                break;
            case "calloutmarkerping_acknowledged":
                var_0 _id_0B52( var_2, var_3 );
                break;
            case "calloutmarkerping_acknowledged_cancel":
                var_0 _id_0B53( var_2 );
                break;
            case "calloutmarkerping_enemy_repinged":
                var_0 _id_0B57( var_2 );
                break;
            case "map_ping_delete_marker":
                var_0 _id_0B58();
                break;
            case "br_inventory_slot_request":
                var_0 _id_0B55( var_2 );
                break;
            default:
                break;
        }
    }
}

_id_2F73()
{
    var_0 = self;

    if ( !isdefined( var_0._id_2FA4 ) )
        var_0._id_2FA4 = [];

    var_0 thread _id_0B63();
}

_id_0B66( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = var_0 _meth_871E( 0 );

    if ( !isdefined( var_1 ) )
        return 0;

    var_2 = var_0 _meth_8574( var_1, 1 );

    if ( !isdefined( var_2 ) )
        return 0;

    var_3 = var_0 _meth_867A( var_1, var_2, "type" );

    if ( !isdefined( var_3 ) )
        return 0;

    if ( var_3 != "useable" )
        return 0;

    return 1;
}

_id_0B5A( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !isplayer( var_0 ) )
        return 0;

    if ( !isdefined( var_0.team ) )
        return 0;

    if ( var_0.team == "neutral" )
        return 0;

    return var_0.team != var_1.team;
}

_id_0B5C( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !_func_02DB( var_0 ) )
        return issubstr( var_0._id_048F, "brloot_plunder_extraction" );

    if ( !isdefined( var_0.model ) )
        return 0;

    return var_0.model == "military_skyhook_far";
}

_id_0B59( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !_func_02DB( var_0 ) )
        return 0;

    if ( !isdefined( var_0._id_3E7E ) )
        return 0;

    return var_0._id_3E7E == "battle_royale_loadout" || var_0._id_3E7E == "killstreak" || var_0._id_3E7E == "juggernaut" || var_0._id_3E7E == "manual_turret";
}

_id_2F78( var_0 )
{
    return isdefined( var_0._id_5542 ) && var_0._id_5542 == "equip_supportBox";
}

_id_0B5B( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !var_0 _meth_86F7() )
        return 0;

    if ( var_0._id_048F != "br_plunder_box" )
        return 0;

    return 1;
}

_id_2F74( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !_func_02DB( var_0 ) )
        return 0;

    return issubstr( var_0.classname, "grenade" ) || issubstr( var_0.classname, "c4_" ) || issubstr( var_0.classname, "proximity_explosive_" ) || issubstr( var_0.classname, "claymore_" );
}

_id_2F58( var_0, var_1 )
{
    if ( var_0 _meth_81D2() || var_0 _meth_8603() )
        return 0;

    if ( !isalive( var_0 ) )
        return 0;

    if ( istrue( var_0._id_9AA6 ) && !isdefined( var_1 ) )
        return 0;

    if ( istrue( var_0._id_7245 ) )
        return 0;

    if ( var_0 scripts\cp_mp\utility\player_utility::_id_8AB5() )
        return 0;

    return 1;
}

_id_6AAC( var_0 )
{
    switch ( var_0 )
    {
        case 0:
            return undefined;
        case 1:
            return undefined;
        case 8:
            return undefined;
        case 2:
            return "ping_need_armor";
        case 3:
            return "ping_need_midcal";
        case 4:
            return "ping_need_shells";
        case 5:
            return "ping_need_smallcal";
        case 6:
            return "ping_need_launcher";
        case 7:
            return "ping_need_highcal";
        default:
            break;
    }

    return undefined;
}

_id_6AAB( var_0 )
{
    switch ( var_0 )
    {
        case 0:
            return "plunder";
        case 2:
            return "brloot_armor_plate";
        case 3:
            return "brloot_ammo_762";
        case 4:
            return "brloot_ammo_12g";
        case 5:
            return "brloot_ammo_919";
        case 6:
            return "brloot_ammo_rocket";
        case 7:
            return "brloot_ammo_50cal";
        case 8:
        case 1:
        default:
            break;
    }

    return "";
}

_id_2F84( var_0 )
{
    var_1 = self;

    if ( !_id_2F58( var_1 ) || !_id_0B68() )
        return;

    var_2 = var_1 _meth_878D( -1 );

    if ( var_2 )
    {
        var_3 = var_1 _meth_87A1( -1 );
        var_1 _id_2F81( -1 );

        if ( var_3 == var_0 )
        {
            var_1 _id_2F7B( "br_ping_cancel", -1 );
            return;
        }
    }

    var_4 = getdvarint( "scr_calloutmarkerping_zoffset_danger", 82 );
    var_5 = ( 0, 0, var_4 );
    var_1 _meth_8713( -1, var_5, var_0 );
    var_1 thread _id_0B65( -1, var_0 );
    var_1 thread _id_2FA3( var_0 );
}

_id_2FA3( var_0 )
{
    var_1 = self;

    if ( _id_0B68() )
        return;

    wait( getdvarfloat( "scr_calloutmarkerping_delay_between_vo_and_sfx_secs_inventory", 0.5 ) );
    var_2 = _id_6AAC( var_0 );

    if ( isdefined( var_2 ) && isdefined( var_1 ) )
        var_1 _id_2F9E( var_2, -1 );
}

_id_0B51( var_0 )
{
    var_1 = self;

    if ( isalive( var_1 ) )
        return;

    if ( !_id_0B61( var_0 ) )
        return;

    var_2 = var_1 _meth_878E( var_0 );

    if ( !_id_0B5B( var_2 ) )
        return;

    var_1 notify( "buybackRequested" );
}

_id_2F85()
{

}

_id_2F93( var_0 )
{

}

_id_0B5E( var_0 )
{
    if ( !scripts\cp_mp\utility\script_utility::issharedfuncdefined( "challenges", "onPing" ) )
        return;

    if ( _id_0B61( var_0 ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "challenges", "onPing" ) ]]( "object" );
    else if ( _id_0B60( var_0 ) )
    {
        var_1 = self _meth_878E( var_0 );

        if ( isdefined( var_1 ) )
        {
            if ( _id_0B5A( var_1, self ) )
            {
                self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "challenges", "onPing" ) ]]( "enemy" );
                return;
            }

            if ( !isplayer( var_1 ) )
            {
                self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "challenges", "onPing" ) ]]( "object" );
                return;
            }

            return;
            return;
        }
    }
    else if ( _id_0B5F( var_0 ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "challenges", "onPing" ) ]]( "danger" );
    else if ( var_0 == 6 || var_0 == -1 )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "challenges", "onPing" ) ]]( "object" );
}

_id_2F95( var_0, var_1 )
{

}

_id_2F97( var_0, var_1 )
{

}

_id_2F98( var_0 )
{
    return "ping_location_generic";
}

_id_2F96( var_0, var_1 )
{
    var_2 = self;

    if ( isdefined( var_1 ) && isdefined( var_1._id_048F ) )
        var_3 = var_1._id_048F;
    else
        return "";

    var_4 = 0;
    var_5 = tablelookupgetnumrows( level._id_2BC5 );
    var_6 = undefined;

    for ( var_7 = var_4; var_7 < var_5; var_7++ )
    {
        var_8 = tablelookupbyrow( level._id_2BC5, var_7, 1 );

        if ( var_8 == var_3 )
        {
            var_6 = tablelookupbyrow( level._id_2BC5, var_7, 12 );

            if ( var_6 == "" )
            {

            }

            break;
        }
    }

    if ( !isdefined( var_6 ) )
    {
        if ( var_3 == "brloot_plunder_extraction_site_01" || var_3 == "brloot_plunder_extraction_site_02" || var_3 == "equip_fulton_mp" )
            return "ping_plunder_bank";
        else if ( var_3 == "ks_airdrop_crate_br" )
            return "ping_plunder_cache";

        return "";
    }

    var_9 = "";

    if ( issubstr( var_6, "_PLUNDER_CASH" ) )
        var_9 = "ping_plunder_loot";
    else if ( issubstr( var_6, "ARMORY_KIOSK" ) )
    {
        if ( !isalive( var_2 ) )
            var_9 = "ping_response_helpme";
        else
            var_9 = "ping_plunder_vendor";
    }
    else if ( issubstr( var_6, "_SHOTGUN" ) )
        var_9 = "ping_ammo_shotgun";
    else if ( issubstr( var_6, "_AMMO_LAUNCHER" ) )
        var_9 = "ping_ammo_launcher";
    else if ( issubstr( var_6, "_SNIPER" ) )
        var_9 = "ping_ammo_highcal";
    else if ( issubstr( var_6, "_AR_LMG" ) )
        var_9 = "ping_ammo_midcaliber";
    else if ( issubstr( var_6, "_PISTOL_SMG" ) )
        var_9 = "ping_ammo_smallcal";
    else if ( issubstr( var_6, "ARMOR" ) )
        var_9 = "ping_pickup_armor";
    else if ( issubstr( var_6, "_AR" ) )
        var_9 = "ping_weapon_assaultrifle";
    else if ( issubstr( var_6, "_SM" ) )
        var_9 = "ping_weapon_smg";
    else if ( issubstr( var_6, "_SH" ) )
        var_9 = "ping_weapon_shotgun";
    else if ( issubstr( var_6, "_PI" ) )
        var_9 = "ping_weapon_pistol";
    else if ( issubstr( var_6, "_SN" ) )
        var_9 = "ping_weapon_sniper";
    else if ( issubstr( var_6, "_LM" ) )
        var_9 = "ping_weapon_lmg";
    else if ( issubstr( var_6, "_LA" ) )
        var_9 = "ping_weapon_launcher";
    else if ( var_6 == "MP/BR_TYPE_GENERIC_ME" )
        var_9 = "ping_pickup_riotshield";
    else if ( issubstr( var_6, "CONCUSSION" ) || issubstr( var_6, "DECOY" ) || issubstr( var_6, "FLASH" ) || issubstr( var_6, "GAS_BR" ) || issubstr( var_6, "HEARTBEAT" ) || issubstr( var_6, "SMOKE" ) || issubstr( var_6, "SNAPSHOT" ) )
        var_9 = "ping_ammo_grenadetactical";
    else if ( issubstr( var_6, "ATMINE" ) || issubstr( var_6, "CLAYMORE" ) || issubstr( var_6, "C4" ) || issubstr( var_6, "FRAG" ) || issubstr( var_6, "SEMTEX" ) || issubstr( var_6, "THERMITE" ) || issubstr( var_6, "THROWING" ) || issubstr( var_6, "MOLOTOV" ) )
        var_9 = "ping_ammo_grenadelethal";
    else if ( issubstr( var_6, "TACTICAL_COVER" ) || issubstr( var_6, "TROPHY" ) || issubstr( var_6, "RECONDRONE" ) || issubstr( var_6, "EMPDRONE" ) || issubstr( var_6, "DEADSILENCE" ) || issubstr( var_6, "AMMO_DROP" ) || issubstr( var_6, "SUPPORT_BOX" ) || issubstr( var_6, "TAC_INSERT" ) || issubstr( var_6, "ADVANCED_SUPPLY_DROP" ) )
        var_9 = "ping_pickup_generic";
    else if ( issubstr( var_6, "RESPAWN_TOKEN" ) || issubstr( var_6, "LOOT_CACHE" ) || issubstr( var_6, "CONTRACT" ) || issubstr( var_6, "GASMASK" ) )
        var_9 = "ping_pickup_generic";
    else if ( var_6 == "EQUIPMENT/ADRENALINE_BR" || var_6 == "MP_BR_INGAME/KIOSK_ITEM_SELF_REVIVE" )
        var_9 = "ping_pickup_health";
    else if ( var_6 == "KILLSTREAKS/MANUAL_TURRET" )
        var_9 = "ping_killstreaks_shieldturret_open";
    else if ( issubstr( var_6, "KILLSTREAK" ) )
        var_9 = "ping_pickup_generic";
    else if ( issubstr( var_6, "_PLUNDER_EXTRACT" ) )
        var_9 = "ping_plunder_bank";
    else
    {

    }

    return var_9;
}

_id_2F81( var_0 )
{
    var_1 = self;

    if ( !isdefined( var_1 ) )
        return;

    _id_0B64( "Remove Callout ID Start: " + var_0 );

    if ( isdefined( var_0 ) )
    {
        if ( var_0 == 0 )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "ping", "calloutMarkerPing_squadLeaderBeaconKillForPlayer" ) )
                [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "ping", "calloutMarkerPing_squadLeaderBeaconKillForPlayer" ) ]]( var_1 );
        }

        var_1 _meth_8715( var_0 );
        _id_0B64( "Remove Callout ID Notify: " + var_0 );
        var_1 notify( "predictiveCalloutClear_" + var_0 );
    }
}

_id_2F8F( var_0 )
{
    self endon( "disconnect" );
    self endon( "predictiveCalloutClear_" + var_0 );
    _id_0B64( "watchWhenMissionCompletes: " + var_0 );
    self waittill( "calloutmarkerping_warzoneKillQuestIcon" );
    _id_2F81( var_0 );
}

_id_2F8C( var_0, var_1 )
{
    self endon( "disconnect" );
    self endon( "predictiveCalloutClear_" + var_0 );
    _id_0B64( "Watch Entity Death or Enemy Disconnect: " + var_0 );

    if ( !isdefined( var_1 ) )
    {

    }
    else if ( isplayer( var_1 ) )
        var_1 waittill( "disconnect" );
    else
        var_1 waittill( "death" );

    _id_2F81( var_0 );
}

_id_2F8D( var_0, var_1 )
{
    self endon( "predictiveCalloutClear_" + var_0 );
    _id_0B64( "watchPlayerDeathOrDisconnect: " + var_0 );
    var_2 = _id_6AAB( var_1 );
    scripts\engine\utility::waittill_any_2( "death_or_disconnect", "self_pickedupitem_" + var_2 );
    _id_2F81( var_0 );
}

_id_2F8E( var_0, var_1 )
{
    self endon( "disconnect" );
    self endon( "predictiveCalloutClear_" + var_0 );
    _id_0B64( "Watch scriptable death ID: " + var_0 );

    if ( !isdefined( var_1 ) )
    {

    }
    else if ( var_1._id_048F == "equip_fulton_mp" )
    {
        var_2 = var_1._id_0186;

        if ( !isdefined( var_2 ) )
            return;

        var_2 scripts\engine\utility::waittill_any_2( "death", "fulton_takeoff" );
    }
    else
        level scripts\engine\utility::_id_1087F( "pickedupweapon_kill_callout_" + var_1._id_048F + var_1.origin, "lootcache_opened_kill_callout" + var_1.origin, "dropbag_kill_callout_" + var_1.origin );

    _id_0B64( "Watch scriptable death Remove ID: " + var_0 );
    _id_2F81( var_0 );
}

_id_2F6C( var_0 )
{
    var_1 = self;

    if ( _id_0B61( var_0 ) )
    {
        var_2 = var_1 _id_2F77( var_0 );

        if ( istrue( var_2 ) )
            var_3 = getdvarfloat( "scr_calloutmarkerping_death_timeout_quest_loot", 120.0 );
        else
            var_3 = getdvarfloat( "scr_calloutmarkerping_death_timeout_loot", 30.0 );
    }
    else if ( _id_0B60( var_0 ) )
        var_3 = getdvarfloat( "scr_calloutmarkerping_death_timeout_entity", 60.0 );
    else if ( _id_0B5F( var_0 ) )
        var_3 = getdvarfloat( "scr_calloutmarkerping_death_timeout_danger", 15.0 );
    else if ( var_0 == 6 )
        var_3 = getdvarfloat( "scr_calloutmarkerping_death_timeout_vehicle", 60.0 );
    else if ( !_id_0B68() && var_0 == -1 )
        var_3 = getdvarfloat( "scr_calloutmarkerping_death_timeout_request", 30.0 );
    else
    {
        switch ( var_0 )
        {
            case 0:
                var_3 = getdvarfloat( "scr_calloutmarkerping_death_timeout_navigation", 120.0 );
                break;
            case 5:
                var_3 = getdvarfloat( "scr_calloutmarkerping_death_timeout_world", 120.0 );
                break;
            default:
                var_3 = 2;
        }
    }

    return var_3;
}

_id_2F7A( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    var_0 _id_2F80();
}

_id_2F91( var_0, var_1 )
{
    var_2 = self;

    if ( _id_0B61( var_0 ) )
        return var_1 + 500;
    else if ( _id_0B60( var_0 ) )
        return var_1 + 500;
    else if ( _id_0B5F( var_0 ) )
        return var_1 + 500;
    else if ( var_0 == 6 )
        return var_1 + 500;
    else if ( !_id_0B68() && var_0 == -1 )
        return var_1 + 500;
    else
    {
        switch ( var_0 )
        {
            case 0:
                return var_1 + 500;
            case 5:
                return var_1 + 500;
            default:
                break;
        }
    }
}

_id_2F9D( var_0 )
{
    var_1 = self;

    if ( !isdefined( var_1._id_2FA4[var_0] ) )
        return 0;

    return 1;
}

_id_2F9C( var_0, var_1, var_2, var_3 )
{
    var_4 = self;
    var_5 = var_4._id_2FA4.size;

    if ( var_5 > 10 )
        return 0;

    var_6 = var_4 _id_2F91( var_0, var_3 );
    var_7 = var_6 + var_1;
    var_8 = spawnstruct();
    var_8._id_E05D = var_7;
    var_8._id_B9CC = var_0;
    var_8._id_3139 = 0;
    var_4._id_2FA4[var_2] = var_8;
    return 1;
}

_id_2F92( var_0, var_1, var_2 )
{
    var_3 = self;

    if ( !isdefined( var_3 ) || !isplayer( var_3 ) )
        return 0;

    var_4 = gettime();
    var_5 = "pool" + var_0;
    var_6 = var_3 _id_2F9D( var_5 );

    if ( var_6 )
    {
        var_7 = var_3._id_2FA4[var_5]._id_E05D;

        if ( var_4 >= var_7 )
        {
            var_8 = var_3 _id_2F9C( var_0, var_4, var_5, var_2 );
            return istrue( var_8 );
        }

        if ( var_1 == "ping_response_cancel" && var_3._id_2FA4[var_5]._id_3139 == 0 )
        {
            var_3._id_2FA4[var_5]._id_3139 = 1;
            return 1;
        }

        return 0;
    }
    else if ( var_1 == "ping_response_cancel" )
        return 0;
    else
    {
        var_8 = var_3 _id_2F9C( var_0, var_4, var_5, var_2 );
        return istrue( var_8 );
    }
}

_id_2F94()
{
    level endon( "game_ended" );

    for (;;)
    {
        wait 10;
        var_0 = gettime();

        for ( var_1 = 0; var_1 < level.players.size; var_1++ )
        {
            var_2 = level.players[var_1];

            if ( !isdefined( var_2 ) || !isdefined( var_2._id_2FA4 ) )
                continue;

            foreach ( var_5, var_4 in var_2._id_2FA4 )
            {
                if ( var_0 > var_4._id_E05D )
                    var_2._id_2FA4[var_5] = undefined;
            }
        }
    }
}

_id_2F9B( var_0, var_1, var_2, var_3 )
{
    var_4 = 0;

    if ( var_0 )
    {
        var_5 = _func_0140( var_1, 1 );

        if ( var_5 > var_4 )
            var_4 = var_5;
    }

    if ( var_2 )
    {
        var_5 = _func_0140( var_3, 1 );

        if ( var_5 > var_4 )
            var_4 = var_5;
    }

    return var_4;
}

_id_2F6B()
{
    return 0;
}

_id_2F7B( var_0, var_1 )
{
    return;
}

_id_2F99( var_0 )
{
    var_1 = self;

    if ( !isdefined( var_1._id_AC2A ) || !isdefined( var_1._id_AC2A._id_1068F ) )
        return;

    var_2 = "mp_glob_" + var_1._id_AC2A._id_1068F + "_" + var_0;
    return var_2;
}

_id_2F9A( var_0 )
{
    var_1 = self;

    if ( !isdefined( var_1._id_AC2A ) || !isdefined( var_1._id_AC2A._id_1068F ) )
        return;

    var_2 = "mp_glob3d_" + var_1._id_AC2A._id_1068F + "_" + var_0;
    return var_2;
}

_id_2F9E( var_0, var_1, var_2, var_3 )
{
    var_4 = self;

    if ( !isdefined( var_4 ) || !isplayer( var_4 ) )
        return;

    if ( !isdefined( var_1 ) )
        return;

    if ( !isdefined( var_0 ) || var_0 == "" )
        return;

    if ( isplayer( var_2 ) )
        var_5 = var_2;
    else
        var_5 = var_4;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "sound", "trySayLocalSound" ) )
        level thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "sound", "trySayLocalSound" ) ]]( var_5, var_0, undefined, undefined, var_3 );
}

_id_2F79()
{
    self endon( "disconnect" );
    self endon( "predictiveCalloutClear_0" );
    self notify( "calloutMarkerPing_navigationCancelProximity" );
    self endon( "calloutMarkerPing_navigationCancelProximity" );
    var_0 = getdvarfloat( "scr_calloutmarkerping_death_timeout_navigation", 120.0 );
    var_1 = getdvarint( "scr_calloutmarkerping_navigation_cancel_minimum_time_secs", 10 );
    wait( var_1 );

    if ( !self _meth_878D( 0 ) )
        return;

    var_2 = self _meth_879E( 0 );
    var_3 = getdvarint( "scr_calloutmarkerping_navigation_proximity_cancel_dist_sq", 47089 );
    var_4 = getdvarint( "scr_calloutmarkerping_navigation_proximity_cancel_type", 1 );
    var_5 = getdvarint( "scr_calloutmarkerping_navigation_proximity_cancel_tick_secs", 1.0 );

    for (;;)
    {
        if ( var_4 == 1 )
            var_6 = distancesquared( self.origin, var_2 );
        else
        {
            var_6 = var_3;
            var_7 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getFriendlyPlayers" ) ]]( self.team, 1 );

            foreach ( var_9 in var_7 )
            {
                var_10 = distancesquared( var_9.origin, var_2 );

                if ( var_10 < var_6 )
                    var_6 = var_10;
            }
        }

        if ( var_6 < var_3 )
        {
            _id_2F7B( "br_ping_cancel", 0 );
            _id_2F81( 0 );
            return;
        }

        wait( var_5 );
    }
}

_id_2F80()
{
    var_0 = self;

    if ( isdefined( var_0 ) )
    {
        for ( var_1 = 0; var_1 < 9; var_1++ )
            var_0 _id_2F81( var_1 );
    }
}

_id_2F7F( var_0 )
{
    var_1 = 0;

    foreach ( var_3 in level.players )
    {
        var_3 _id_2F80();

        if ( istrue( var_0 ) )
        {
            var_1++;

            if ( var_1 % 10 == 0 )
                waitframe();
        }
    }
}

_id_2FA2( var_0 )
{
    var_1 = self;
    var_1 notify( "calloutMarkerPingVO_playPredictivePingCleared" );
    var_1 endon( "calloutMarkerPingVO_playPredictivePingCleared" );
    var_1 _id_2F7B( "br_ping_cancel", var_0 );
    wait( getdvarfloat( "scr_calloutmarkerping_delay_between_vo_and_sfx_secs_cleared", 0.5 ) );

    if ( isdefined( var_1 ) )
        var_1 _id_2F9E( "ping_response_cancel", var_0 );
}

_id_2FA0( var_0 )
{
    var_1 = self;
    var_1 _id_2FA2( var_0 );
}

_id_2F9F( var_0, var_1 )
{
    var_2 = self;
    var_2 notify( "calloutMarkerPingVO_playPredictivePingAcknowledged" );
    var_2 endon( "calloutMarkerPingVO_playPredictivePingAcknowledged" );

    if ( _id_0B61( var_0 ) )
        var_3 = "ping_dibs";
    else if ( _id_0B60( var_0 ) )
        var_3 = "ping_response_affirm";
    else if ( _id_0B5F( var_0 ) )
        var_3 = "ping_response_copy";
    else if ( var_0 == 6 )
        var_3 = "ping_response_affirm";
    else if ( !_id_0B68() && var_0 == -1 )
        var_3 = "ping_dibs";
    else
    {
        switch ( var_0 )
        {
            case 0:
                var_3 = "ping_response_affirm";
                break;
            case 5:
                var_3 = "ping_response_copy";
                break;
            default:
                var_3 = "ping_response_affirm";
                break;
        }
    }

    wait( getdvarfloat( "scr_calloutmarkerping_delay_between_vo_and_sfx_secs_acked", 0.5 ) );

    if ( isplayer( var_1 ) )
        var_2 _id_2F9E( var_3, var_0, var_1 );
    else if ( isdefined( var_2 ) )
        var_2 _id_2F9E( var_3, var_0 );
}

_id_2FA1( var_0 )
{
    var_1 = self;
    var_1 notify( "calloutMarkerPingVO_playPredictivePingAdded" );
    var_1 endon( "calloutMarkerPingVO_playPredictivePingAdded" );
    var_1 endon( "calloutMarkerPingVO_playPredictivePingCleared" );
    var_1 endon( "predictiveCalloutClear_" + var_0 );
    wait( getdvarfloat( "scr_calloutmarkerping_delay_between_vo_and_sfx_secs_added", 0.5 ) );

    if ( isdefined( var_1 ) )
        var_1 _id_2F93( var_0 );
}

_id_2F77( var_0 )
{
    var_1 = self;
    var_2 = var_1 _meth_878E( var_0 );

    if ( isdefined( var_2 ) && isdefined( var_2._id_EC8A ) )
        return 1;

    return 0;
}

_id_2F83( var_0, var_1 )
{
    self endon( "disconnect" );
    self endon( "predictiveCalloutClear_" + var_0 );
    var_2 = 0.25;
    var_3 = 0;
    var_4 = self.team;

    for (;;)
    {
        var_5 = _id_0B67( var_0, var_1, var_4 );

        if ( var_5 )
        {
            _id_2F81( var_0 );
            return;
        }

        var_6 = _id_0B5D( var_1, var_4 );

        if ( var_6 )
        {
            var_3 = var_3 + var_2;

            if ( var_3 >= 3 )
            {
                var_7 = var_1 _meth_8188();

                if ( isdefined( var_7 ) )
                    thread _id_2F5D( var_0, var_7 );
                else
                    _id_2F81( var_0 );

                return;
            }
        }

        wait( var_2 );
    }
}

_id_0B67( var_0, var_1, var_2 )
{
    var_3 = self;
    var_4 = 0;
    var_5 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getFriendlyPlayers" ) ]]( var_2, 1 );

    foreach ( var_7 in var_5 )
    {
        if ( var_7 scripts\cp_mp\utility\player_utility::isinvehicle() && var_7._id_FFF1 == var_1 )
        {
            var_3 _meth_8716( var_0, var_7 );
            var_4++;
        }
    }

    if ( var_4 == var_5.size )
        return 1;

    return 0;
}

_id_0B5D( var_0, var_1 )
{
    var_2 = isdefined( var_0._id_AD9B ) && var_0._id_AD9B != var_1;
    var_3 = isdefined( var_0._id_8802 ) && var_0._id_8802 == 0;

    if ( var_3 && var_2 )
        return 1;

    return 0;
}

_id_0B56( var_0 )
{
    var_1 = self;
    var_1 notify( "predictiveCalloutClear_" + var_0 );
    var_1 thread _id_2FA2( var_0 );
}

_id_0B52( var_0, var_1 )
{
    var_2 = self;
    var_2 thread _id_0B65( var_0 );
    var_2 thread _id_2F9F( var_0, var_1 );
}

_id_0B53( var_0 )
{
    var_1 = self;
    var_1 thread _id_2FA0( var_0 );
}

_id_0B54( var_0 )
{
    var_1 = self;
    var_1 thread _id_0B65( var_0 );
    var_1 _id_0B51( var_0 );
    var_1 thread _id_2FA1( var_0 );
    var_1 _id_0B5E( var_0 );
}

_id_0B57( var_0 )
{
    var_1 = self;
    var_1 thread _id_0B65( var_0 );
    var_1 _id_2F7B( "br_ping_enemy", var_0 );
}

_id_0B58()
{
    var_0 = self;
    var_1 = _id_0B62();

    if ( var_1 != -1 )
    {
        var_0 _id_2F7B( "br_ping_cancel", var_1 );
        var_0 _id_2F9E( "ping_response_cancel", var_1 );
    }

    var_0 _id_2F80();
}

_id_0B55( var_0 )
{
    var_1 = self;
    var_1 thread _id_2F84( var_0 );
}
