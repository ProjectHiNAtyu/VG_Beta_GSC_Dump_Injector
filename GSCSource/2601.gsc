// S4 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    scripts\mp\killstreaks\killstreaks::_id_C25C( "lmg_streak", ::_id_F78D, undefined );
}

_id_F78D( var_0 )
{
    if ( isdefined( level._id_8DD2 ) )
    {
        if ( !level [[ level._id_8DD2 ]]( var_0 ) )
            return 0;
    }

    if ( isdefined( level._id_8DAD ) )
    {
        if ( !level [[ level._id_8DAD ]]( var_0 ) )
            return 0;
    }

    if ( self._id_0122.basename == "s4_la_walpha2_mp" )
    {
        self notify( "non_temp_weapon_switch" );
        self waittill( "warmachine_ended" );
    }

    var_1 = makeweapon( "s4_mg_streak_mp" );
    self giveweapon( var_1 );
    var_2 = isdefined( self.pers["mgStreakAmmo"] );
    var_3 = scripts\engine\utility::ter_op( var_2, self.pers["mgStreakAmmo"], weaponclipsize( var_1 ) );
    self setweaponammoclip( var_1, var_3 );
    scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( var_1 );

    if ( !var_2 )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "teamPlayerCardSplash" ) )
            level thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "teamPlayerCardSplash" ) ]]( "used_lmg_streak", var_0.owner );

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "sound", "playKillstreakDeployDialog" ) )
            level thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "sound", "playKillstreakDeployDialog" ) ]]( self, var_0._id_EA0F );
    }
    else if ( isdefined( var_3 ) && var_3 <= 25 )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "sound", "trySayLocalSound" ) )
            level thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "sound", "trySayLocalSound" ) ]]( self, "deathmachine_low" );
    }

    if ( scripts\cp_mp\utility\killstreak_utility::shoulddisablekillstreakweaponswitch() )
        self disableweaponswitch();

    thread _id_A141( var_0, var_1 );

    while ( var_1 != self getcurrentweapon() )
    {
        if ( scripts\mp\utility\game::_id_8743() && self hasweapon( var_1 ) )
            scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( var_1 );

        waitframe();
    }

    thread _id_A13E();

    if ( !istrue( _id_10A8A( var_1 ) ) )
        return 0;

    return 1;
}

_id_A13E()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "death" );
    self endon( "non_temp_weapon_switch" );

    for (;;)
    {
        var_0 = self getcurrentweapon();
        var_1 = var_0;

        while ( var_0 == var_1 )
        {
            var_0 = self getcurrentweapon();
            waitframe();
        }

        self notify( "non_temp_weapon_switch" );
    }
}

_id_A141( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    var_2 = scripts\engine\utility::_id_10896( "death", "non_temp_weapon_switch", "round_ended" );

    if ( scripts\cp_mp\utility\killstreak_utility::donttakekillstreakonladderuse( var_2 ) )
    {
        thread _id_A141( var_0, var_1 );
        return;
    }

    if ( isdefined( level._id_8DBA ) )
        level [[ level._id_8DBA ]]( var_0 );

    var_3 = self getweaponammoclip( var_1 );
    self.pers["mgStreakAmmo"] = scripts\engine\utility::ter_op( var_3 == 0, undefined, var_3 );

    if ( var_2 != "round_ended" )
    {
        self enableweaponswitch();
        self takeweapon( var_1 );
        self notify( "deathmachine_ended" );
    }
}

_id_10A8A( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "death" );
    self endon( "non_temp_weapon_switch" );
    var_1 = self getweaponammoclip( var_0 );
    var_2 = 0;
    var_3 = 0;

    while ( var_1 > 0 )
    {
        waitframe();
        var_1 = self getweaponammoclip( var_0 );

        if ( var_1 == 25 && !var_2 )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "sound", "trySayLocalSound" ) )
                level thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "sound", "trySayLocalSound" ) ]]( self, "deathmachine_low" );

            var_2 = 1;
            continue;
        }

        if ( var_1 == 0 && !var_3 )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "sound", "trySayLocalSound" ) )
                level thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "sound", "trySayLocalSound" ) ]]( self, "deathmachine_deplete" );

            var_3 = 1;
        }
    }

    self _meth_83FF( self._id_0326 );
    return 1;
}
