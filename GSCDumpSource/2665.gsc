// S4 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_6BC3( var_0 )
{
    return scripts\mp\utility\teams::_id_69E2( var_0 );
}

_id_6DC8()
{
    if ( !isdefined( level._id_E72A ) || !isdefined( level._id_4AEC ) )
        return 0;

    if ( level._id_F25F )
        return level._id_F25B - level._id_E72A - level._id_4AEC - level._id_AD62;
    else
        return gettime() - level._id_E72A - level._id_4AEC - level._id_AD62;
}

_id_6DC9()
{
    var_0 = _id_6DC7();

    if ( var_0 == 0 )
        return 0;

    return _id_6DC8() / ( _id_6DC7() * 1000 ) * 100;
}

_id_6CFD()
{
    return _id_6DC8() / 1000;
}

_id_6B40()
{
    return _id_6CFD() / 60;
}

_id_D72F( var_0, var_1 )
{
    self endon( "disconnect" );

    if ( istrue( level._id_A71E ) )
        return;

    if ( !isdefined( self._id_5893 ) )
        self._id_5893 = 0.0;

    if ( self._id_5893 == var_0 )
        return;

    if ( isdefined( var_1 ) )
        wait( var_1 );

    self notify( "setUIPostGameFade" );
    self endon( "setUIPostGameFade" );

    if ( self._id_5893 < var_0 )
        self._id_5893 = clamp( self._id_5893 + 0.5 * abs( self._id_5893 - var_0 ), 0.0, 1.0 );
    else
        self._id_5893 = clamp( self._id_5893 - 0.5 * abs( self._id_5893 - var_0 ), 0.0, 1.0 );

    self setclientomnvar( "ui_total_fade", self._id_5893 );
    wait 0.1;
    self._id_5893 = var_0;
    self setclientomnvar( "ui_total_fade", self._id_5893 );
}

_id_C29C( var_0, var_1, var_2, var_3 )
{
    _id_0A66::_id_C2BD( "roundswitch", var_1 );
    var_0 = "scr_" + var_0 + "_roundswitch";
    level._id_C93D = var_0;
    level._id_C93F = var_2;
    level._id_C93E = var_3;
    level._id_C93C = getdvarint( var_0, var_1 );

    if ( level._id_C93C < var_2 )
        level._id_C93C = var_2;
    else if ( level._id_C93C > var_3 )
        level._id_C93C = var_3;
}

_id_C29B( var_0, var_1 )
{
    _id_0A66::_id_C2BD( "roundlimit", var_1 );
}

_id_C272( var_0, var_1 )
{
    _id_0A66::_id_C2BD( "numTeams", var_1 );
}

_id_C2C2( var_0, var_1 )
{
    _id_0A66::_id_C2BD( "winlimit", var_1 );
}

_id_C2C0( var_0, var_1 )
{
    _id_0A66::_id_C2BD( "winbytwoenabled", var_1 );
}

_id_C2C1( var_0, var_1 )
{
    _id_0A66::_id_C2BD( "winbytwomaxrounds", var_1 );
}

_id_C242( var_0, var_1 )
{
    _id_0A66::_id_C2BD( "dogtags", var_1 );
}

_id_C29F( var_0, var_1 )
{
    _id_0A66::_id_C2BD( "scorelimit", var_1 );
}

_id_C2B3( var_0, var_1 )
{
    _id_0A66::_id_C2BC( "timelimit", var_1 );
    setdvar( "ui_timelimit", _id_6DC7() );
}

_id_C24F( var_0, var_1 )
{
    _id_0A66::_id_C2BD( "halftime", var_1 );
    setdvar( "ui_halftime", _id_6A6E() );
}

_id_C270( var_0, var_1 )
{
    _id_0A66::_id_C2BD( "numlives", var_1 );
}

_id_C271( var_0, var_1 )
{
    _id_0A66::_id_C2BD( "numrevives", var_1 );
}

_id_D629( var_0 )
{
    setdvar( "overtimeTimeLimit", var_0 );
}

_id_C25E( var_0 )
{
    _id_0A66::_id_C2BD( "lastStandHealth", var_0 );
}

_id_C261( var_0 )
{
    _id_0A66::_id_C2BD( "lastStandReviveHealth", var_0 );
}

_id_C264( var_0 )
{
    _id_0A66::_id_C2BC( "lastStandTimer", var_0 );
}

_id_C262( var_0 )
{
    _id_0A66::_id_C2BC( "lastStandReviveTimer", var_0 );
}

_id_C266( var_0 )
{
    _id_0A66::_id_C2BB( "lastStandWeapon", var_0 );
}

_id_C265( var_0 )
{
    _id_0A66::_id_C2BC( "lastStandWeaponDelay", var_0 );
}

_id_C263( var_0 )
{
    _id_0A66::_id_C2BC( "lastStandSuicideTimer", var_0 );
}

_id_C25F( var_0 )
{
    _id_0A66::_id_C2BC( "lastStandInvulnTimer", var_0 );
}

_id_C260( var_0 )
{
    _id_0A66::_id_C2BC( "lastStandReviveDecayScale", var_0 );
}

_id_89F1()
{
    if ( !level.teambased )
        return 0;

    if ( level._id_10E50 != 1 && level._id_C936 != 1 )
        return 1;

    if ( getgametype() == "sr" || getgametype() == "sd" || getgametype() == "siege" || getgametype() == "cyber" || getgametype() == "mtmc" || getgametype() == "control" )
        return 1;

    return 0;
}

_id_8842()
{
    if ( !level.teambased )
        return 1;

    if ( game["roundsPlayed"] == 0 )
        return 1;

    return 0;
}

_id_A4BA()
{
    if ( level._id_5E70 )
        return 1;

    if ( !level.teambased )
        return 1;

    if ( level._id_C936 > 1 && game["roundsPlayed"] >= level._id_C936 - 1 && !_id_8A88() && !_id_89FC() )
        return 1;

    if ( _id_8952() && ( _id_7999() || _id_79A8() ) )
    {
        if ( _id_DBB9() && _id_88EA() )
            return 1;
        else if ( _id_8A88() || _id_89FC() )
        {
            if ( game["overtimeRoundsPlayed"] == 1 )
                return 1;
        }
        else if ( !level._id_B896 )
            return 1;
    }

    var_0 = 0;

    foreach ( var_2 in level._id_EF86 )
    {
        var_3 = getrankxp( var_2 );

        if ( var_3 == level._id_10E50 - 1 )
        {
            var_0 = 1;
            break;
        }
    }

    var_5 = level._id_10E50 > 0 && var_0;

    if ( var_5 && _id_15C9() )
    {
        if ( _id_8952() )
            return 0;
        else
            return 1;
    }

    return 0;
}

_id_A4BB()
{
    if ( level._id_5E70 )
        return 1;

    if ( !level.teambased )
        return 1;

    if ( level._id_C936 > 1 && game["roundsPlayed"] >= level._id_C936 - 1 && !_id_8A88() && !_id_89FC() )
        return 1;

    if ( _id_8952() && ( _id_7999() || _id_79A8() ) )
    {
        if ( _id_DBB9() && _id_88EA() )
            return 1;
        else if ( _id_8A88() || _id_89FC() )
        {
            if ( game["overtimeRoundsPlayed"] == 1 )
                return 1;
        }
        else if ( !level._id_B896 )
            return 1;
    }

    var_0 = 0;

    foreach ( var_2 in level._id_EF86 )
    {
        var_3 = getrankxp( var_2 );

        if ( var_3 == level._id_10E50 - 1 )
            return 1;
    }

    return 0;
}

_id_10A19()
{
    if ( level._id_B896 )
        return 0;

    if ( !level.teambased )
        return 1;

    if ( isdefined( level._id_AB23 ) )
        return 0;

    if ( level._id_10E50 == 1 && _id_79A8() )
        return 1;

    if ( level._id_C936 == 1 )
        return 1;

    return 0;
}

_id_10A14()
{
    if ( level._id_5E70 )
        return 1;

    if ( istrue( level._id_40F8 ) )
        return 1;

    if ( _id_10A19() )
        return 1;

    if ( !level.teambased )
        return 1;

    if ( _id_7999() || _id_79A8() )
        return !level._id_B896;

    return 0;
}

_id_8AFA()
{
    switch ( getgametype() )
    {
        case "arena_evo":
        case "arena":
        case "siege":
        case "sr":
        case "sd":
            return getdvarint( "scr_" + getgametype() + "_winByTwoEnabled", 0 ) == 1;
    }

    return 0;
}

_id_6B2F()
{
    return getdvarint( "scr_" + getgametype() + "_winByTwoMaxRounds", level._id_10E50 );
}

_id_DBB9()
{
    var_0 = game["roundsWon"]["allies"];
    var_1 = game["roundsWon"]["axis"];
    return _id_8AFA() && abs( var_0 - var_1 ) < 2 && game["overtimeRoundsPlayed"] < _id_6B2F();
}

_id_88EA()
{
    return _id_DBB9() && game["overtimeRoundsPlayed"] == _id_6B2F() - 1;
}

_id_8A88()
{
    switch ( getgametype() )
    {
        case "payload":
        case "ball":
        case "ctf":
            return 1;
    }

    return 0;
}

_id_840A()
{
    return isdefined( game["status"] ) && game["status"] == "recordTTB";
}

_id_D71D( var_0 )
{
    if ( !_id_8A88() )
        return 0;

    var_1 = _id_6CFD();
    var_2 = scripts\mp\gamescore::_id_0BE6( var_0 );

    if ( !_id_8A89() || var_1 < game["timeToBeat"] && var_2 >= game["timeToBeatScore"] )
    {
        if ( game["timeToBeatTeam"] != "none" && game["timeToBeatTeam"] != var_0 )
            game["timeToBeatOld"] = game["timeToBeat"];

        game["timeToBeat"] = var_1;
        game["timeToBeatTeam"] = var_0;
        game["timeToBeatScore"] = var_2;
        return 1;
    }

    return 0;
}

_id_8A89()
{
    return game["timeToBeat"] != 0;
}

_id_DBB7()
{
    return _id_8A89() && game["overtimeRoundsPlayed"] == 1;
}

_id_89FC()
{
    switch ( getgametype() )
    {
        case "rush":
            return 1;
    }

    return 0;
}

_id_D6AA( var_0, var_1 )
{
    if ( !_id_89FC() )
        return 0;

    var_2 = game["timeToBeatTeam"] != "none" && var_1 == game["timeToBeatScore"];

    if ( var_1 >= game["timeToBeatScore"] )
    {
        if ( game["timeToBeatTeam"] != "none" && game["timeToBeatTeam"] != var_0 )
            game["timeToBeatScoreOld"] = game["timeToBeatScore"];

        game["timeToBeatTeam"] = var_0;
        game["timeToBeatScore"] = var_1;
    }

    foreach ( var_4 in level.players )
    {
        var_4 setclientomnvar( "ui_friendly_time_to_beat", scripts\engine\utility::ter_op( var_4.team == game["timeToBeatTeam"], game["timeToBeatScore"], game["timeToBeatScoreOld"] ) );
        var_4 setclientomnvar( "ui_enemy_time_to_beat", scripts\engine\utility::ter_op( var_4.team != game["timeToBeatTeam"], game["timeToBeatScore"], game["timeToBeatScoreOld"] ) );
    }

    if ( var_2 )
        return "tie";
    else
        return game["timeToBeatTeam"];
}

_id_DBA9()
{
    return _id_89FC() && game["overtimeRoundsPlayed"] == 1;
}

_id_8952()
{
    if ( _func_0329() )
        return 1;

    switch ( getgametype() )
    {
        case "cmd":
        case "payload":
        case "ball":
        case "ctf":
        case "rush":
        case "blitz":
            return 1;
        case "dd":
        case "arena_evo":
        case "arena":
        case "siege":
        case "sr":
        case "sd":
            return _id_8AFA();
    }

    return 0;
}

_id_6B23()
{
    if ( _func_0329() )
        return -1;

    var_0 = 0;

    switch ( getgametype() )
    {
        case "payload":
        case "ball":
        case "ctf":
        case "siege":
        case "sr":
        case "sd":
        case "blitz":
            var_0 = 2;
            break;
        case "cmd":
        case "dd":
            var_0 = 1;
            break;
    }

    if ( _id_873A() && !_id_8A88() )
        return -1;

    return var_0;
}

_id_6E7C()
{
    if ( !isdefined( level._id_10E49 ) )
    {
        if ( !_id_89F1() || !_id_893D() || _id_891B() )
            level._id_10E49 = "teamScores";
        else
            level._id_10E49 = "roundsWon";
    }

    return level._id_10E49;
}

_id_8A1D()
{
    if ( !isdefined( level._id_DD4E ) )
        level._id_DD4E = getdvarint( "#x3ec72e1a8b230bea6", 0 ) == 0;

    return level._id_DD4E;
}

_id_31D0()
{
    if ( !_id_8A1D() )
        return 0;

    var_0 = 0;

    switch ( getgametype() )
    {
        case "dm":
        case "war":
        case "gun":
        case "base":
        case "front":
        case "arm":
            var_0 = 1;
    }

    return var_0;
}

_id_DBA3()
{
    if ( !_id_7999() && !_id_79A8() )
        return 0;

    if ( !_id_8952() )
        return 0;

    var_0 = _id_15C9();

    if ( var_0 && _id_82B7() )
    {
        var_1 = _id_6B23();
        var_0 = scripts\engine\utility::ter_op( var_1 == -1, 1, game["overtimeRoundsPlayed"] < var_1 );
    }

    var_2 = _id_DBB9();
    var_3 = _id_DBB7();
    var_4 = _id_DBA9();
    return !level._id_5E70 && ( var_0 || var_2 || var_3 || var_4 );
}

_id_C632()
{
    if ( istrue( level._id_C632 ) )
        return 1;

    return ( getgametype() == "ctf" || getgametype() == "blitz" ) && !_id_82B7() && _id_6E7C() == "roundsWon";
}

_id_318B()
{
    if ( !isdefined( level._id_4950 ) )
        level._id_4950 = 0;

    if ( level._id_4950 )
        return 0;

    switch ( getgametype() )
    {
        case "grnd":
        case "grind":
        case "dm":
        case "war":
        case "koth":
        case "hq":
        case "pill":
        case "conf":
        case "tdef":
        case "dd":
        case "ball":
        case "dom":
        case "infect":
        case "base":
        case "front":
        case "arm":
            return 1;
        case "mp_zomb":
        case "gun":
        case "ctf":
        case "siege":
        case "sr":
        case "sd":
            return 0;
        default:
            return 0;
    }
}

_id_79A6()
{
    if ( _id_0A66::_id_6E38( "timelimit" ) <= 0 )
        return 0;

    var_0 = scripts\mp\gamelogic::_id_6DCA();

    if ( var_0 > 0 )
        return 0;

    return 1;
}

_id_7999()
{
    if ( level._id_C936 <= 0 )
        return 0;

    return game["roundsPlayed"] >= level._id_C936;
}

_id_799C()
{
    if ( _id_893D() )
        return 0;

    if ( level._id_C93B <= 0 )
        return 0;

    if ( level.teambased )
    {
        foreach ( var_1 in level._id_EF86 )
        {
            if ( game["teamScores"][var_1] >= level._id_C93B )
                return 1;
        }
    }
    else
    {
        for ( var_3 = 0; var_3 < level.players.size; var_3++ )
        {
            var_4 = level.players[var_3];

            if ( isdefined( var_4._id_0369 ) && var_4._id_0369 >= level._id_C93B )
                return 1;
        }
    }

    return 0;
}

_id_79A8()
{
    if ( level._id_10E50 <= 0 )
        return 0;

    if ( !level.teambased )
        return 1;

    foreach ( var_1 in level._id_EF86 )
    {
        if ( getrankxp( var_1 ) >= level._id_10E50 )
            return 1;
    }

    return 0;
}

_id_6CEF()
{
    if ( _id_89F1() )
    {
        if ( level._id_C936 )
            return level._id_C936;
        else
            return level._id_10E50;
    }
    else
        return level._id_C93B;
}

getrankxp( var_0 )
{
    return game["roundsWon"][var_0];
}

_id_15C9()
{
    var_0 = _id_6E7C();
    var_1 = undefined;

    foreach ( var_3 in level._id_EF86 )
    {
        if ( !isdefined( var_1 ) )
        {
            var_1 = game[var_0][var_3];
            continue;
        }

        if ( var_1 != game[var_0][var_3] )
            return 0;
    }

    return 1;
}

_id_893D()
{
    return level._id_A8C1;
}

_id_6DC7()
{
    if ( _id_82B7() && ( !isdefined( game["inNukeOvertime"] ) || !game["inNukeOvertime"] ) )
    {
        if ( istrue( game["timeToBeat"] ) )
            return game["timeToBeat"];
        else
        {
            var_0 = getdvarfloat( "overtimeTimeLimit" );

            if ( var_0 > 0 )
                return var_0;
            else
                return _id_0A66::_id_6E38( "timelimit" );
        }
    }
    else if ( isdefined( level._id_5836 ) && level._id_5836 > 0 )
        return _id_0A66::_id_6E38( "timelimit" ) + level._id_5836;
    else
        return _id_0A66::_id_6E38( "timelimit" );
}

_id_6A6E()
{
    if ( _id_82B7() )
        return 0;
    else if ( isdefined( game["inNukeOvertime"] ) && game["inNukeOvertime"] )
        return 0;
    else
        return _id_0A66::_id_6E38( "halftime" );
}

_id_82B7()
{
    return isdefined( game["status"] ) && game["status"] == "overtime";
}

_id_60A6()
{
    if ( isdefined( level._id_60A6 ) )
        return level._id_60A6;

    if ( level.teambased )
    {
        foreach ( var_1 in level._id_EF86 )
        {
            if ( scripts\mp\utility\teams::_id_6DAC( var_1, "hasSpawned" ) )
                return 1;
        }

        return 0;
    }

    return level._id_9C7A > 1;
}

_id_6AF4( var_0 )
{
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( !isalive( var_3 ) )
            continue;

        if ( level.teambased && isdefined( var_0 ) )
        {
            if ( var_0 == var_3.pers["team"] )
                var_1[var_1.size] = var_3;

            continue;
        }

        var_1[var_1.size] = var_3;
    }

    return var_1;
}

_id_C01A()
{
    if ( !isplayer( self ) )
        return 0;

    return level._id_C016 && !self._id_FF12;
}

_id_AB13()
{
    if ( !isplayer( self ) )
        return 0;

    return level._id_AB13 && !self._id_FF12;
}

_id_BD25()
{
    return level._id_AB11 && getdvarint( "#x3bb277258e9aa8055" );
}

_id_96A2()
{
    return level._id_EC4B || _id_BD25() && getdvarint( "#x3c2e3c12dd83611f5", 0 ) || _func_046D();
}

_id_9BB3()
{
    return level._id_9BB4;
}

_id_6A46()
{
    return _id_0A66::_id_6E38( "numlives" );
}

_id_6AD8( var_0 )
{
    var_1 = undefined;

    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_0 ) && var_3.team != var_0 )
            continue;

        if ( !var_3 scripts\cp_mp\utility\player_utility::_id_0C14() && !var_3 scripts\mp\playerlogic::_id_9CB6() )
            continue;

        if ( isdefined( var_3._id_EC30 ) && var_3._id_EC30 )
            continue;

        var_1 = var_3;
    }

    return var_1;
}

_id_F741()
{
    var_0 = undefined;

    foreach ( var_2 in level.players )
    {
        if ( !var_2 scripts\cp_mp\utility\player_utility::_id_0C14() && !var_2 scripts\mp\playerlogic::_id_9CB6() )
            continue;

        if ( level._id_39F9 )
        {
            if ( var_2 _meth_81D2() )
                continue;
        }

        if ( isdefined( var_0 ) )
            return undefined;
        else
            var_0 = var_2;
    }

    if ( isdefined( var_0 ) )
        return var_0;
    else
        return undefined;
}

_id_6C5C()
{
    var_0 = [];

    foreach ( var_2 in level.players )
    {
        if ( !var_2 scripts\cp_mp\utility\player_utility::_id_0C14() && !var_2 scripts\mp\playerlogic::_id_9CB6() )
            continue;

        if ( level._id_39F9 )
        {
            if ( var_2 _meth_81D2() )
                continue;
        }

        var_0[var_0.size] = var_2;
    }

    return var_0;
}

_id_47A6()
{
    if ( !isbot( self ) && !_func_03D5( self ) )
    {
        if ( _func_0329() )
            return 1;

        if ( _func_038F() )
            return 1;

        if ( level._id_39F9 )
            return 0;
    }

    if ( getdvarint( "scr_skipclasschoice", 0 ) > 0 && getgametype() != "arena_evo" )
        return 1;

    return 0;
}

_id_15B3()
{
    if ( getgametype() == "br" || getgametype() == "cranked" )
        return level.teambased;

    var_0 = _id_4C58();
    return var_0;
}

_id_4C58()
{
    if ( getgametype() == "gun" || getgametype() == "infect" )
        return 0;

    var_0 = int( _func_021D( "mp/gametypesTable.csv", 0, getgametype(), 4 ) );
    return var_0 > 0;
}

_id_1575()
{
    if ( getdvar( "scr_br_gametype", "" ) == "dmz" && !scripts\mp\gametypes\br_public::_id_87EB() )
        return 1;

    if ( getdvarint( "scr_skipclasschoice", 0 ) > 0 || _id_DDAF() )
        return 0;

    if ( isdefined( level._id_1576 ) )
    {
        var_0 = self [[ level._id_1576 ]]();

        if ( isdefined( var_0 ) )
            return var_0;
    }

    if ( _id_07A8::_id_609F( "infil_will_run" ) && isdefined( level._id_2DCE ) )
        return 0;

    var_1 = int( _func_021D( "mp/gametypesTable.csv", 0, getgametype(), 5 ) );

    if ( !isai( self ) && istrue( level._id_47A5 ) )
        return 0;

    return var_1;
}

_id_DDAF()
{
    if ( getgametype() == "dm" )
        return istrue( level._id_18F6 );
    else if ( _id_8744() )
        return isdefined( level._id_1A91 ) && !scripts\mp\gametypes\arena::_id_8936();

    return 0;
}

_id_DCA5()
{
    return 0;
}

_id_D54C( var_0, var_1 )
{
    var_2 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    var_3 = [];

    if ( var_2 != "s4_me_knife_mp" )
        var_3 = getweaponattachments( var_0 );

    if ( isdefined( var_2 ) )
        var_4 = _func_0225( "mp/statstable.csv", 4, var_2 );
    else
    {

    }

    for ( var_5 = 0; var_5 < 3; var_5++ )
    {
        var_6 = -1;

        if ( isdefined( var_3[var_5] ) )
        {
            if ( !scripts\mp\utility\weapon::_id_8753( var_0, var_3[var_5] ) )
                var_6 = _func_0225( "mp/attachmenttable.csv", 4, var_3[var_5] );
        }
    }
}

_id_D4D3( var_0 )
{
    var_1 = getmatchrulesdata( "commonOption", "teamCount" );
    _func_01D2( "scr_" + getgametype() + "_teamcount", var_1 );
    var_2 = getmatchrulesdata( "commonOption", "teamSize" );
    _func_01D2( "scr_" + getgametype() + "_teamsize", var_2 );
    var_3 = getmatchrulesdata( "commonOption", "timeLimit" );
    _func_01D2( "scr_" + getgametype() + "_timeLimit", var_3 );
    _id_C2B3( getgametype(), var_3 );
    var_4 = getmatchrulesdata( "commonOption", "scoreLimit" );
    _func_01D2( "scr_" + getgametype() + "_scoreLimit", var_4 );
    _id_C29F( getgametype(), var_4 );
    var_5 = getmatchrulesdata( "commonOption", "winLimit" );
    _func_01D2( "scr_" + getgametype() + "_winLimit", var_5 );
    _id_C2C2( getgametype(), var_5 );
    var_6 = getmatchrulesdata( "commonOption", "roundLimit" );
    _func_01D2( "scr_" + getgametype() + "_roundLimit", var_6 );
    _id_C29B( getgametype(), var_6 );
    var_7 = getmatchrulesdata( "commonOption", "roundSwitch" );
    _func_01D2( "scr_" + getgametype() + "_roundSwitch", var_7 );
    _id_C29C( getgametype(), var_7, 0, 9 );
    var_8 = getmatchrulesdata( "commonOption", "winByTwoEnabled" );
    _func_01D2( "scr_" + getgametype() + "_winByTwoEnabled", var_8 );
    _id_C2C0( getgametype(), var_8 );
    var_9 = getmatchrulesdata( "commonOption", "winByTwoMaxRounds" );
    _func_01D2( "scr_" + getgametype() + "_winByTwoMaxRounds", var_9 );
    _id_C2C1( getgametype(), var_9 );
    var_10 = getmatchrulesdata( "commonOption", "dogTags" );
    _func_01D2( "scr_" + getgametype() + "_dogTags", var_10 );
    _id_C242( getgametype(), var_10 );
    var_11 = getmatchrulesdata( "commonOption", "spawnProtectionTimer" );
    _func_01D2( "scr_" + getgametype() + "_spawnProtectionTimer", var_11 );
    var_12 = getmatchrulesdata( "commonOption", "numLives" );
    _func_01D2( "scr_" + getgametype() + "_numLives", var_12 );
    _id_C270( getgametype(), var_12 );
    var_13 = getmatchrulesdata( "commonOption", "numRevives" );
    _func_01D2( "scr_" + getgametype() + "_numRevives", var_13 );
    _id_C271( getgametype(), var_13 );
    _func_01D2( "scr_player_maxhealth", getmatchrulesdata( "commonOption", "maxHealth" ) );
    _func_01D2( "scr_player_healthregentime", getmatchrulesdata( "commonOption", "healthRegen" ) );
    _func_01D2( "scr_" + getgametype() + "_healthregentime", getmatchrulesdata( "commonOption", "healthRegen" ) );
    _func_01D2( "scr_player_disableSuperSprint", getmatchrulesdata( "commonOption", "disableSuperSprint" ) );
    _func_01D2( "scr_player_disableMount", getmatchrulesdata( "commonOption", "disableMount" ) );
    _func_01D2( "scr_player_lastStand", getmatchrulesdata( "commonOption", "lastStand" ) );
    var_14 = getmatchrulesdata( "commonOption", "lastStandHealth" );
    _func_01D2( "scr_" + getgametype() + "_lastStandHealth", var_14 );
    _id_C25E( var_14 );
    var_15 = getmatchrulesdata( "commonOption", "lastStandReviveHealth" );
    _func_01D2( "scr_" + getgametype() + "_lastStandReviveHealth", var_15 );
    _id_C261( var_15 );
    var_16 = getmatchrulesdata( "commonOption", "lastStandTimer" );
    _func_01D2( "scr_" + getgametype() + "_lastStandTimer", var_16 );
    _id_C264( var_16 );
    var_17 = getmatchrulesdata( "commonOption", "lastStandReviveTimer" );
    _func_01D2( "scr_" + getgametype() + "_lastStandReviveTimer", var_17 );
    _id_C262( var_17 );
    var_18 = getmatchrulesdata( "commonOption", "lastStandSuicideTimer" );
    _func_01D2( "scr_" + getgametype() + "_lastStandSuicideTimer", var_18 );
    _id_C263( var_18 );
    _func_01D2( "scr_player_reviveuseweapon", getmatchrulesdata( "commonOption", "reviveUseWeapon" ) );
    level._id_9BD4 = 0;
    _func_01D2( "scr_game_vampirism", getmatchrulesdata( "commonOption", "vampirism" ) );
    _func_01D2( "scr_game_spectatetype", getmatchrulesdata( "commonOption", "spectateModeAllowed" ) );
    _func_01D2( "#x34de038a0efe85dec", getmatchrulesdata( "commonOption", "showKillcam" ) );
    _func_01D2( "scr_" + getgametype() + "_killcamType", getmatchrulesdata( "commonOption", "killcamType" ) );
    _func_01D2( "scr_" + getgametype() + "_allow3rdspectate", getmatchrulesdata( "commonOption", "spectate3rdAllowed" ) );
    _func_01D2( "scr_game_enableMinimap", getmatchrulesdata( "commonOption", "enableMinimap" ) );
    _func_01D2( "scr_game_forceuav", getmatchrulesdata( "commonOption", "radarAlwaysOn" ) );
    _func_01D2( "scr_game_radarHidePings", getmatchrulesdata( "commonOption", "radarHideShots" ) );
    _func_01D2( "scr_game_navBarHideEnemy", getmatchrulesdata( "commonOption", "compassHideEnemy" ) );
    _func_01D2( "scr_game_navBarHidePings", getmatchrulesdata( "commonOption", "compassHidePings" ) );
    _func_01D2( "scr_game_disablespawncamera", getmatchrulesdata( "commonOption", "disableSpawnCamera" ) );
    _func_01D2( "scr_" + getgametype() + "_playerrespawndelay", getmatchrulesdata( "commonOption", "respawnDelay" ) );
    _func_01D2( "scr_" + getgametype() + "_suicidespawndelay", getmatchrulesdata( "commonOption", "suicideSpawnDelay" ) );
    _func_01D2( "scr_" + getgametype() + "_waverespawndelay", getmatchrulesdata( "commonOption", "waveRespawnDelay" ) );
    _func_01D2( "scr_" + getgametype() + "_waverespawndelay_alt", getmatchrulesdata( "commonOption", "waveRespawnDelayAlt" ) );
    _func_01D2( "scr_player_forcerespawn", getmatchrulesdata( "commonOption", "forceRespawn" ) );
    level._id_9BD3 = getmatchrulesdata( "commonOption", "allowCustomClasses" );
    level._id_EB98 = getmatchrulesdata( "commonOption", "allowIntel" );
    _func_01D2( "scr_" + getgametype() + "_allowKillstreaks", getmatchrulesdata( "commonOption", "allowKillstreaks" ) );
    _func_01D2( "scr_" + getgametype() + "_allowPerks", getmatchrulesdata( "commonOption", "allowPerks" ) );
    _func_01D2( "scr_" + getgametype() + "_allowSupers", getmatchrulesdata( "commonOption", "allowSupers" ) );
    _func_01D2( "scr_" + getgametype() + "_ffPunishLimit", getmatchrulesdata( "commonOption", "ffPunishLimit" ) );
    _func_01D2( "scr_" + getgametype() + "_roundRetainStreaks", getmatchrulesdata( "commonOption", "roundRetainStreaks" ) );
    _func_01D2( "scr_" + getgametype() + "_roundRetainStreakProg", getmatchrulesdata( "commonOption", "roundRetainStreakProg" ) );
    _func_01D2( "scr_" + getgametype() + "_deathRetainStreaks", getmatchrulesdata( "commonOption", "deathRetainStreaks" ) );
    _func_01D2( "scr_game_casualScoreStreaks", getmatchrulesdata( "commonOption", "casualScoreStreaks" ) );
    _func_01D2( "scr_game_superFastChargeRate", getmatchrulesdata( "commonOption", "superFastChargeRate" ) );
    _func_01D2( "scr_game_superPointsMod", getmatchrulesdata( "commonOption", "superPointsMod" ) );
    _func_01D2( "scr_game_spawnProtectionTimer", getmatchrulesdata( "commonOption", "spawnProtectionTimer" ) );
    _func_01D2( "scr_game_lethalDelay", getmatchrulesdata( "commonOption", "equipmentDelay" ) );
    _func_01D2( "scr_game_equipmentMSProtect", getmatchrulesdata( "commonOption", "equipmentMSProtect" ) );
    _func_01D2( "scr_game_disableBattleChatter", getmatchrulesdata( "commonOption", "disableBattleChatter" ) );
    _func_01D2( "scr_game_disableAnnouncer", getmatchrulesdata( "commonOption", "disableAnnouncer" ) );
    _func_01D2( "scr_game_inGameLoot", getmatchrulesdata( "commonOption", "inGameLoot" ) );
    _func_01D2( "scr_game_infilSkip", getmatchrulesdata( "commonOption", "infilSkip" ) );
    _func_01D2( "scr_" + getgametype() + "_practiceRound", getmatchrulesdata( "commonOption", "practiceRound" ) );
    _func_01D2( "scr_game_postGameExfil", getmatchrulesdata( "commonOption", "postGameExfil" ) );
    _func_01D2( "scr_game_exfilExtractTimer", getmatchrulesdata( "commonOption", "exfilExtractTimer" ) );
    _func_01D2( "scr_game_exfilActiveTimer", getmatchrulesdata( "commonOption", "exfilActiveTimer" ) );
    _func_01D2( "scr_player_postGameExfilWeapon", getmatchrulesdata( "commonOption", "postGameExfilWeapon" ) );
    level._id_3E39 = getmatchrulesdata( "commonOption", "crankedBombTimer" );
    _func_01D2( "scr_" + getgametype() + "_crankedBombTimer", level._id_3E39 );
    _id_0798::_id_C23F( getgametype(), level._id_3E39 );
    _func_01D2( "scr_game_magcount", getmatchrulesdata( "commonOption", "magCount" ) );
    _func_01D2( "scr_game_tacticalmode", getmatchrulesdata( "commonOption", "tacticalMode" ) );
    _func_01D2( "scr_game_onlyheadshots", getmatchrulesdata( "commonOption", "headshotsOnly" ) );

    if ( !isdefined( var_0 ) )
        _func_01D2( "#x32b87090bf6ed2669", getmatchrulesdata( "commonOption", "friendlyFire" ) );

    setdvar( "#x3dd44740c17e447cf", getdvarint( "scr_game_forceuav" ) == 1 );
    _func_01D2( "scr_" + getgametype() + "_enemyDeathLoc", getmatchrulesdata( "commonOption", "enemyDeathLoc" ) );
    _func_01D2( "scr_" + getgametype() + "_pointsPerKill", getmatchrulesdata( "commonOption", "pointsPerKill" ) );
    _func_01D2( "scr_" + getgametype() + "_pointsPerDeath", getmatchrulesdata( "commonOption", "pointsPerDeath" ) );
    _func_01D2( "scr_" + getgametype() + "_pointsHeadshotBonus", getmatchrulesdata( "commonOption", "pointsHeadshotBonus" ) );
    _func_01D2( "scr_" + getgametype() + "_pointsPerKSKill", getmatchrulesdata( "commonOption", "pointsPerKSKill" ) );
    _func_01D2( "scr_game_cdltuning", getmatchrulesdata( "commonOption", "cdltuning" ) );
    _func_01D2( "#x3241a9a6ce36287b5", 0 );
    _func_01D2( "scr_devRemoveDomFlag", "" );
    _func_01D2( "scr_devPlaceDomFlag", "" );
    level.dynamicmapelementsdisabled = getmatchrulesdata( "commonOption", "dynamicMapElementsDisabled" );
    _func_01D2( "scr_game_dynamicMapElements_disable", level.dynamicmapelementsdisabled );

    if ( _id_BD25() || level._id_EC4B || _id_873A() )
    {
        level._id_39F9 = getmatchrulesdata( "commonOption", "codcasterEnabled" );
        setdvar( "#x3827b80b44a7a53e5", level._id_39F9 );
        _func_01D2( "scr_game_interactivemap_disable", getmatchrulesdata( "commonOption", "interactiveMapDisabled" ) );
        _func_01D2( "scr_game_matchStartTime", getmatchrulesdata( "commonOption", "matchStartTime" ) );
        _func_01D2( "scr_game_roundStartTime", getmatchrulesdata( "commonOption", "roundStartTime" ) );
    }

    if ( getdvarint( "scr_is_custom_killstreak_cost_enabled", 0 ) )
    {
        level.killstreakcost = [];
        level.killstreakcost["airdrop"] = getmatchrulesdata( "commonOption", "killstreakCost", "airdrop" );
        level.killstreakcost["uav"] = getmatchrulesdata( "commonOption", "killstreakCost", "uav" );
        level.killstreakcost["precision_airstrike"] = getmatchrulesdata( "commonOption", "killstreakCost", "precision_airstrike" );
        level.killstreakcost["white_phosphorus"] = getmatchrulesdata( "commonOption", "killstreakCost", "white_phosphorus" );
        level.killstreakcost["lmg_streak"] = getmatchrulesdata( "commonOption", "killstreakCost", "lmg_streak" );
        level.killstreakcost["intel"] = getmatchrulesdata( "commonOption", "killstreakCost", "intel" );
        level.killstreakcost["attack_dogs"] = getmatchrulesdata( "commonOption", "killstreakCost", "attack_dogs" );
        level.killstreakcost["warmachine"] = getmatchrulesdata( "commonOption", "killstreakCost", "warmachine" );
        level.killstreakcost["mortar_barrage"] = getmatchrulesdata( "commonOption", "killstreakCost", "mortar_barrage" );
        level.killstreakcost["glide_bomb"] = getmatchrulesdata( "commonOption", "killstreakCost", "glide_bomb" );
        level.killstreakcost["counter_spy_plane"] = getmatchrulesdata( "commonOption", "killstreakCost", "counter_spy_plane" );
    }

    if ( getdvarint( "scr_is_custom_rule_suppressive_enabled", 0 ) )
        setdvar( "#x335822ef1bce26e0f", getmatchrulesdata( "commonOption", "disableSuppressiveFire" ) == 0 );

    if ( getdvarint( "#x33f300b8b8e3754a", 0 ) )
        setdvar( "#x3323c457f447874b4", getmatchrulesdata( "commonOption", "disableCombatFog" ) );
}

_id_C2DD()
{
    for (;;)
    {
        level waittill( "host_migration_begin" );
        [[ level._id_81CB ]]();
    }
}

_id_C2DE( var_0 )
{
    self endon( "disconnect" );

    if ( isdefined( var_0 ) )
        var_0 endon( "death" );

    for (;;)
    {
        level waittill( "host_migration_begin" );

        if ( isdefined( self._id_90AD ) )
            self visionsetthermalforplayer( self._id_90AD, 0 );
    }
}

_id_6B14( var_0, var_1 )
{
    var_2 = [];
    var_2["loadoutPrimaryAttachment2"] = "none";
    var_2["loadoutSecondaryAttachment2"] = "none";
    var_3 = [];
    var_2["loadoutPrimary"] = _id_6B13( "defaultClasses", var_0, var_1, "class", "weaponSetups", 0, "weapon" );
    var_2["loadoutPrimaryAttachment"] = _id_6B13( "defaultClasses", var_0, var_1, "class", "weaponSetups", 0, "attachmentSetup", 0, "attachment" );
    var_2["loadoutPrimaryAttachment2"] = _id_6B13( "defaultClasses", var_0, var_1, "class", "weaponSetups", 0, "attachmentSetup", 1, "attachment" );
    var_2["loadoutPrimaryCamo"] = _id_6B13( "defaultClasses", var_0, var_1, "class", "weaponSetups", 0, "camo" );
    var_2["loadoutPrimaryReticle"] = _id_6B13( "defaultClasses", var_0, var_1, "class", "weaponSetups", 0, "reticle" );
    var_2["loadoutSecondary"] = _id_6B13( "defaultClasses", var_0, var_1, "class", "weaponSetups", 1, "weapon" );
    var_2["loadoutSecondaryAttachment"] = _id_6B13( "defaultClasses", var_0, var_1, "class", "weaponSetups", 1, "attachmentSetup", 0, "attachment" );
    var_2["loadoutSecondaryAttachment2"] = _id_6B13( "defaultClasses", var_0, var_1, "class", "weaponSetups", 1, "attachmentSetup", 1, "attachment" );
    var_2["loadoutSecondaryCamo"] = _id_6B13( "defaultClasses", var_0, var_1, "class", "weaponSetups", 1, "camo" );
    var_2["loadoutSecondaryReticle"] = _id_6B13( "defaultClasses", var_0, var_1, "class", "weaponSetups", 1, "reticle" );
    var_2["loadoutPerks"] = var_3;
    var_2["loadoutKillstreak1"] = scripts\mp\class::_id_C103( var_0, var_1, 0 );
    var_2["loadoutKillstreak2"] = scripts\mp\class::_id_C103( var_0, var_1, 1 );
    var_2["loadoutKillstreak3"] = scripts\mp\class::_id_C103( var_0, var_1, 2 );
    return var_2;
}

_id_8980( var_0 )
{
    if ( isdefined( level._id_A8D5 ) )
    {
        foreach ( var_2 in level._id_A8D5 )
        {
            if ( self _meth_81EF( var_2._id_A6B6 ) )
                return 0;
        }
    }

    return 1;
}

_id_60A5( var_0 )
{
    switch ( var_0 )
    {
        case "sotf_ffa":
        case "sotf":
            return 1;
        default:
            return 0;
    }
}

_id_873A()
{
    if ( isusingmatchrulesdata() )
    {
        if ( getdvarint( "#x3cdac6cd526dc1ac9" ) == 0 && getmatchrulesdata( "cwlRulesEnabled" ) == 1 )
            return 1;
    }

    return getdvarint( "#x3c9a5a09701a8f471" ) || istrue( level._id_3335 );
}

_id_891A()
{
    if ( level._id_EC4B && ( getdvarint( "#x3c9a5a09701a8f471" ) || istrue( level._id_3335 ) ) )
        return 1;

    return 0;
}

_id_8919()
{
    if ( _id_BD25() && ( getdvarint( "#x3c9a5a09701a8f471" ) || istrue( level._id_3335 ) ) )
        return 1;

    return 0;
}

_id_8918()
{
    if ( _id_891A() || _id_8919() )
        return 1;

    return 0;
}

_id_D5EE( var_0, var_1, var_2, var_3 )
{
    if ( var_1 == "axis" )
        var_0 = var_0 + 1000;
    else if ( var_1 == "allies" )
        var_0 = var_0 + 2000;

    if ( isdefined( var_2 ) )
        var_0 = var_0 + ( var_2 + 1 ) * 10000;

    if ( isdefined( var_3 ) )
    {
        if ( _func_02B2( var_3 ) )
            var_0 = var_0 + ( var_3 + 1 ) * 1000000;
        else
            scripts\engine\utility::_id_5578( "mlg announcement extra data supports numbers only. Invalid extra data: " + var_3 );
    }

    if ( isdefined( var_0 ) )
        setomnvar( "ui_mlg_announcement", var_0 );
}

_id_891B()
{
    if ( getgametype() == "dom" || getgametype() == "ctf" || getgametype() == "rush" || getgametype() == "blitz" )
        return 1;

    return 0;
}

_id_8AAF( var_0, var_1 )
{
    var_2 = 0;

    if ( isdefined( var_1 ) )
    {
        if ( isusingmatchrulesdata() && _id_6B13( "defaultClasses", var_0, var_1, "class", "inUse" ) )
            var_2 = 1;
    }
    else
    {
        for ( var_1 = 0; var_1 < 6; var_1++ )
        {
            if ( isusingmatchrulesdata() && _id_6B13( "defaultClasses", var_0, var_1, "class", "inUse" ) )
            {
                var_2 = 1;
                break;
            }
        }
    }

    return var_2;
}

_id_6B13( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( var_1 == "axis" )
        var_2 = var_2 + 6;

    if ( isdefined( var_6 ) )
        return getmatchrulesdata( var_0, var_2, var_3, var_4, var_5, var_6 );
    else if ( isdefined( var_5 ) )
        return getmatchrulesdata( var_0, var_2, var_3, var_4, var_5 );
    else
        return getmatchrulesdata( var_0, var_2, var_3, var_4 );
}

_id_8A2E()
{
    return gettime() < self._id_E390 + level._id_8DCE;
}

_id_8909()
{
    return isdefined( level._id_E72A ) && gettime() < level._id_E72A + level._id_553F;
}

_id_6C54()
{
    var_0 = "";

    if ( _id_9BB3() )
    {
        var_1 = _func_00C5();
        var_0 = _func_043E( var_1 );
    }

    return var_0;
}

getgametype()
{
    return level.gametype;
}

_id_60DB()
{
    var_0 = getgametype();

    if ( var_0 == "arena_evo" || var_0 == "base" )
        return 1;

    return 0;
}

_id_6D80()
{
    var_0 = getgametype();

    if ( var_0 == "br" )
    {
        var_1 = getdvar( "scr_br_gametype", "" );

        if ( var_1 != "" )
            return var_1;
    }

    return var_0;
}

_id_8A55()
{
    var_0 = getgametype();
    var_1 = _id_6D80();
    return var_0 != var_1;
}

_id_98BC()
{
    if ( getdvarint( "scr_forceLeanThreadMode" ) == 1 )
        return 1;

    if ( getgametype() == "arm" || getgametype() == "br" || level._id_9133 == 1 )
        return 1;

    return 0;
}

_id_CA3E()
{
    if ( getdvarint( "scr_forceLeanThreadMode" ) == 1 )
        return 1;

    if ( getgametype() == "br" || level._id_9133 == 1 )
        return 1;

    return 0;
}

_id_8A45()
{
    return getdvarint( "#x383f4ee2ef55c5a3c", 0 ) > 1;
}

_id_60A4()
{
    if ( !isdefined( game["infil"] ) )
        return 0;

    var_0 = 1;

    foreach ( var_2 in level._id_EF86 )
    {
        if ( !isdefined( game["infil"][var_2] ) || !isdefined( game["infil"][var_2]["lanes"] ) )
        {
            var_0 = 0;
            break;
        }
    }

    return var_0;
}

_id_EF73( var_0 )
{
    return _id_60A4() && scripts\mp\utility\teams::_id_885E( var_0 ) && isdefined( game["infil"][var_0]["lanes"] );
}

_id_88D4()
{
    return _id_0764::_id_8599() || _id_8722();
}

_id_8722()
{
    if ( getdvarint( "scr_set_air_denied", 0 ) == 1 )
        return 1;

    if ( self.team == "spectator" )
        return 0;

    if ( isdefined( level._id_1346 ) && istrue( level._id_1346[self.team] ) )
        return 1;

    return 0;
}

_id_6B22()
{
    var_0 = level._id_ACF7;

    if ( !isdefined( var_0 ) )
    {
        var_0 = max( 0, getdvarfloat( "scr_outOfBoundsTime", 3 ) );
        level._id_ACF7 = var_0;
    }

    return var_0;
}

_id_6B1F()
{
    var_0 = level._id_ACF6;

    if ( !isdefined( var_0 ) )
    {
        var_0 = max( 0, getdvarfloat( "scr_outOfBoundsCooldown", 3 ) );
        level._id_ACF6 = var_0;
    }

    return var_0;
}

_id_6B20()
{
    var_0 = level._id_ACF9;

    if ( !isdefined( var_0 ) )
    {
        var_0 = max( 0, getdvarfloat( "scr_outOfBoundsTimeMinefield", 3 ) );
        level._id_ACF9 = var_0;
    }

    return var_0;
}

_id_6B21()
{
    level._id_ACFA = 5;
    return level._id_ACFA;
}

_id_6B1E()
{
    level._id_ACF8 = 5;
    return level._id_ACF8;
}

_id_FCD0()
{
    if ( self.pers["team"] == "spectator" )
        self _meth_82F4( "#x34e863b20c48c0055", "" );
    else
    {
        if ( level._id_C93B > 0 && !_id_893D() )
        {
            if ( isdefined( _id_6BA0( self.pers["team"] ) ) )
            {
                if ( level._id_E427 )
                {
                    self _meth_82F4( "#x34e863b20c48c0055", _id_6BA0( self.pers["team"] ) );
                    return;
                }

                self _meth_82F4( "#x34e863b20c48c0055", _id_6BA0( self.pers["team"] ), level._id_C93B );
                return;
                return;
            }

            return;
        }

        if ( isdefined( _id_6BA3( self.pers["team"] ) ) )
            self _meth_82F4( "#x34e863b20c48c0055", _id_6BA3( self.pers["team"] ) );
    }
}

_id_D610( var_0, var_1 )
{
    game["strings"]["objective_" + var_0] = var_1;
}

_id_D60E( var_0, var_1 )
{
    game["strings"]["objective_score_" + var_0] = var_1;
}

_id_D609( var_0, var_1 )
{
    game["strings"]["objective_hint_" + var_0] = var_1;
}

_id_6BA3( var_0 )
{
    return game["strings"]["objective_" + var_0];
}

_id_6BA0( var_0 )
{
    return game["strings"]["objective_score_" + var_0];
}

_id_6B9F( var_0 )
{
    return game["strings"]["objective_hint_" + var_0];
}

_id_F0D5( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || var_0 == "" || !isdefined( var_1 ) || var_1 == "" )
        return 0;

    return issubstr( var_0, var_1 );
}

_id_88E8()
{
    return isdefined( level._id_0253 ) && level._id_0253 == 1;
}

_id_8A7C()
{
    return isdefined( level._id_0253 ) && level._id_0253 == 2;
}

_id_352C()
{
    if ( istrue( level._id_F0DD ) )
    {
        if ( !isdefined( self._id_89D2 ) )
        {
            if ( scripts\engine\utility::cointoss() )
            {
                self setclientomnvar( "ui_realism_hud", 1 );
                self._id_89D2 = 1;
            }
            else
            {
                self setclientomnvar( "ui_realism_hud", 0 );
                self._id_89D2 = 0;
            }
        }
    }
    else if ( scripts\cp_mp\utility\game_utility::_id_89D2() )
        self setclientomnvar( "ui_realism_hud", 1 );
    else
        self setclientomnvar( "ui_realism_hud", 0 );
}

_id_87DC( var_0 )
{
    var_1 = 0;

    switch ( getgametype() )
    {
        case "cyber":
            if ( isdefined( level._id_427B._id_32AF ) && self.team == level._id_427B._id_AD9B && self != level._id_427B._id_32AF )
            {
                var_2 = distancesquared( level._id_427B._id_32AF.origin, self.origin );
                var_3 = distancesquared( level._id_427B._id_32AF.origin, var_0.origin );

                if ( var_2 < 90000 || var_3 < 90000 )
                {
                    var_1 = 1;
                    break;
                }
            }

            foreach ( var_5 in level._id_A8D5 )
            {
                if ( istrue( var_5._id_047A._id_F5DD ) )
                    continue;

                var_6 = var_5._id_AD9B;

                if ( var_6 == self.team )
                {
                    var_2 = distancesquared( var_5._id_047A.origin, self.origin );
                    var_3 = distancesquared( var_5._id_047A.origin, var_0.origin );

                    if ( var_2 < 90000 || var_3 < 90000 )
                    {
                        var_1 = 1;
                        break;
                    }
                }
            }

            break;
        case "dd":
        case "sr":
        case "sd":
            if ( self.team != game["defenders"] )
                break;

            foreach ( var_9 in level._id_A8D5 )
            {
                var_10 = distancesquared( var_9._id_047A.origin, var_0.origin );

                if ( var_10 < 90000 )
                {
                    var_1 = 1;
                    break;
                }
            }

            break;
        case "grind":
        case "pill":
        case "siege":
        case "dom":
        case "base":
        case "arm":
            foreach ( var_9 in level._id_A8D5 )
            {
                if ( self.team != var_9._id_AD9B )
                    continue;

                var_13 = distancesquared( var_9._id_411F, self.origin );
                var_14 = distancesquared( var_9._id_411F, var_0.origin );

                if ( var_13 < 90000 || var_14 < 90000 )
                {
                    var_1 = 1;
                    break;
                }
            }

            break;
        case "grnd":
        case "koth":
        case "hq":
        case "patrol":
            if ( isdefined( level._id_110CD ) )
                var_1 = _func_0119( self.origin, level._id_110CD._id_047A ) || _func_0119( var_0.origin, level._id_110CD._id_047A );

            break;
    }

    return var_1;
}

_id_874E( var_0 )
{
    var_1 = 0;

    switch ( getgametype() )
    {
        case "cyber":
            if ( istrue( var_0._id_8769 ) )
            {
                var_1 = 1;
                break;
            }

            if ( isdefined( level._id_427B._id_32AF ) && self.team == level._id_427B._id_AD9B && self != level._id_427B._id_32AF )
            {
                var_2 = distancesquared( level._id_427B._id_32AF.origin, self.origin );
                var_3 = distancesquared( level._id_427B._id_32AF.origin, var_0.origin );

                if ( var_2 < 90000 || var_3 < 90000 )
                {
                    var_1 = 1;
                    break;
                }
            }

            foreach ( var_5 in level._id_A8D5 )
            {
                if ( istrue( var_5._id_047A._id_F5DD ) )
                    continue;

                var_6 = var_5._id_AD9B;

                if ( var_6 != self.team )
                {
                    var_7 = distancesquared( var_5._id_047A.origin, self.origin );
                    var_8 = distancesquared( var_5._id_047A.origin, var_0.origin );

                    if ( var_7 < 90000 || var_8 < 90000 )
                    {
                        var_1 = 1;
                        break;
                    }
                }
            }

            break;
        case "dd":
        case "sr":
        case "sd":
            if ( self.team == game["defenders"] )
                break;

            foreach ( var_11 in level._id_A8D5 )
            {
                var_12 = distancesquared( var_11._id_047A.origin, var_0.origin );

                if ( var_12 < 90000 )
                {
                    var_1 = 1;
                    break;
                }
            }

            break;
        case "grind":
        case "pill":
        case "siege":
        case "dom":
        case "base":
        case "arm":
            foreach ( var_11 in level._id_A8D5 )
            {
                if ( self.team == var_11._id_AD9B )
                    continue;

                var_7 = distancesquared( var_11._id_411F, self.origin );
                var_8 = distancesquared( var_11._id_411F, var_0.origin );

                if ( var_7 < 90000 || var_8 < 90000 )
                {
                    var_1 = 1;
                    break;
                }
            }

            break;
        case "grnd":
        case "koth":
        case "hq":
        case "patrol":
            if ( isdefined( level._id_110CD ) )
                var_1 = _func_0119( self.origin, level._id_110CD._id_047A ) || _func_0119( var_0.origin, level._id_110CD._id_047A );

            break;
    }

    return var_1;
}

_id_60D8()
{
    switch ( getgametype() )
    {
        case "war":
        case "trial":
        case "infect":
        case "br":
        case "base":
        case "arm":
            return 1;
        default:
            return 0;
    }
}

_id_9AB3()
{
    switch ( level.mapname )
    {
        case "mp_quarry2":
        case "mp_donetsk":
        case "mp_port2_gw":
        case "mp_farms2_gw":
        case "mp_boneyard_gw":
        case "mp_firingrange":
        case "mp_farms2":
        case "mp_br_mechanics":
        case "mp_downtown_gw":
        case "mp_locale_test":
            return 1;
        default:
            return 0;
    }
}

_id_8744()
{
    switch ( getgametype() )
    {
        case "arena":
            return 1;
        default:
            return 0;
    }
}

_id_8743()
{
    switch ( getgametype() )
    {
        case "arena_evo":
            return 1;
        default:
            return 0;
    }
}

_id_60DA()
{
    if ( !level.teambased )
        return 0;

    if ( _id_8743() )
        return 1;

    switch ( getgametype() )
    {
        case "base":
            return 0;
        default:
            return 1;
    }
}

_id_86E7()
{
    return getdvarint( "scr_gl_use_temp_vo", 0 );
}
